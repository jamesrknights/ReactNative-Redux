e0c86797d26833b9acb2c303eae4ad0e

'use strict';

var ReactPropTypes = require('prop-types');

var deprecatedPropType = require('deprecatedPropType');

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var TransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({ perspective: ReactPropTypes.number }), ReactPropTypes.shape({ rotate: ReactPropTypes.string }), ReactPropTypes.shape({ rotateX: ReactPropTypes.string }), ReactPropTypes.shape({ rotateY: ReactPropTypes.string }), ReactPropTypes.shape({ rotateZ: ReactPropTypes.string }), ReactPropTypes.shape({ scale: ReactPropTypes.number }), ReactPropTypes.shape({ scaleX: ReactPropTypes.number }), ReactPropTypes.shape({ scaleY: ReactPropTypes.number }), ReactPropTypes.shape({ translateX: ReactPropTypes.number }), ReactPropTypes.shape({ translateY: ReactPropTypes.number }), ReactPropTypes.shape({ skewX: ReactPropTypes.string }), ReactPropTypes.shape({ skewY: ReactPropTypes.string })])),

  transformMatrix: TransformMatrixPropType,

  decomposedMatrix: DecomposedMatrixPropType,

  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};

module.exports = TransformPropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRyYW5zZm9ybVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJSZWFjdFByb3BUeXBlcyIsInJlcXVpcmUiLCJkZXByZWNhdGVkUHJvcFR5cGUiLCJUcmFuc2Zvcm1NYXRyaXhQcm9wVHlwZSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwiRXJyb3IiLCJEZWNvbXBvc2VkTWF0cml4UHJvcFR5cGUiLCJUcmFuc2Zvcm1Qcm9wVHlwZXMiLCJ0cmFuc2Zvcm0iLCJhcnJheU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJwZXJzcGVjdGl2ZSIsIm51bWJlciIsInJvdGF0ZSIsInN0cmluZyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJza2V3WCIsInNrZXdZIiwidHJhbnNmb3JtTWF0cml4IiwiZGVjb21wb3NlZE1hdHJpeCIsInJvdGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtBQVNBOztBQUVBLElBQUlBLGlCQUFpQkMsUUFBUSxZQUFSLENBQXJCOztBQUVBLElBQUlDLHFCQUFxQkQsUUFBUSxvQkFBUixDQUF6Qjs7QUFFQSxJQUFJRSwwQkFBMEIsU0FBMUJBLHVCQUEwQixDQUM1QkMsS0FENEIsRUFFNUJDLFFBRjRCLEVBRzVCQyxhQUg0QixFQUluQjtBQUNULE1BQUlGLE1BQU1DLFFBQU4sQ0FBSixFQUFxQjtBQUNuQixXQUFPLElBQUlFLEtBQUosQ0FDTCx1REFDQSw2Q0FGSyxDQUFQO0FBSUQ7QUFDRixDQVhEOztBQWFBLElBQUlDLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQzdCSixLQUQ2QixFQUU3QkMsUUFGNkIsRUFHN0JDLGFBSDZCLEVBSXBCO0FBQ1QsTUFBSUYsTUFBTUMsUUFBTixDQUFKLEVBQXFCO0FBQ25CLFdBQU8sSUFBSUUsS0FBSixDQUNMLHdEQUNBLGlDQUZLLENBQVA7QUFJRDtBQUNGLENBWEQ7O0FBYUEsSUFBSUUscUJBQXFCO0FBaUJ2QkMsYUFBV1YsZUFBZVcsT0FBZixDQUNUWCxlQUFlWSxTQUFmLENBQXlCLENBQ3ZCWixlQUFlYSxLQUFmLENBQXFCLEVBQUNDLGFBQWFkLGVBQWVlLE1BQTdCLEVBQXJCLENBRHVCLEVBRXZCZixlQUFlYSxLQUFmLENBQXFCLEVBQUNHLFFBQVFoQixlQUFlaUIsTUFBeEIsRUFBckIsQ0FGdUIsRUFHdkJqQixlQUFlYSxLQUFmLENBQXFCLEVBQUNLLFNBQVNsQixlQUFlaUIsTUFBekIsRUFBckIsQ0FIdUIsRUFJdkJqQixlQUFlYSxLQUFmLENBQXFCLEVBQUNNLFNBQVNuQixlQUFlaUIsTUFBekIsRUFBckIsQ0FKdUIsRUFLdkJqQixlQUFlYSxLQUFmLENBQXFCLEVBQUNPLFNBQVNwQixlQUFlaUIsTUFBekIsRUFBckIsQ0FMdUIsRUFNdkJqQixlQUFlYSxLQUFmLENBQXFCLEVBQUNRLE9BQU9yQixlQUFlZSxNQUF2QixFQUFyQixDQU51QixFQU92QmYsZUFBZWEsS0FBZixDQUFxQixFQUFDUyxRQUFRdEIsZUFBZWUsTUFBeEIsRUFBckIsQ0FQdUIsRUFRdkJmLGVBQWVhLEtBQWYsQ0FBcUIsRUFBQ1UsUUFBUXZCLGVBQWVlLE1BQXhCLEVBQXJCLENBUnVCLEVBU3ZCZixlQUFlYSxLQUFmLENBQXFCLEVBQUNXLFlBQVl4QixlQUFlZSxNQUE1QixFQUFyQixDQVR1QixFQVV2QmYsZUFBZWEsS0FBZixDQUFxQixFQUFDWSxZQUFZekIsZUFBZWUsTUFBNUIsRUFBckIsQ0FWdUIsRUFXdkJmLGVBQWVhLEtBQWYsQ0FBcUIsRUFBQ2EsT0FBTzFCLGVBQWVpQixNQUF2QixFQUFyQixDQVh1QixFQVl2QmpCLGVBQWVhLEtBQWYsQ0FBcUIsRUFBQ2MsT0FBTzNCLGVBQWVpQixNQUF2QixFQUFyQixDQVp1QixDQUF6QixDQURTLENBakJZOztBQXFDdkJXLG1CQUFpQnpCLHVCQXJDTTs7QUF5Q3ZCMEIsb0JBQWtCckIsd0JBekNLOztBQTRDdkJjLFVBQVFwQixtQkFBbUJGLGVBQWVlLE1BQWxDLEVBQTBDLGlDQUExQyxDQTVDZTtBQTZDdkJRLFVBQVFyQixtQkFBbUJGLGVBQWVlLE1BQWxDLEVBQTBDLGlDQUExQyxDQTdDZTtBQThDdkJlLFlBQVU1QixtQkFBbUJGLGVBQWVlLE1BQWxDLEVBQTBDLGlDQUExQyxDQTlDYTtBQStDdkJTLGNBQVl0QixtQkFBbUJGLGVBQWVlLE1BQWxDLEVBQTBDLGlDQUExQyxDQS9DVztBQWdEdkJVLGNBQVl2QixtQkFBbUJGLGVBQWVlLE1BQWxDLEVBQTBDLGlDQUExQztBQWhEVyxDQUF6Qjs7QUFtREFnQixPQUFPQyxPQUFQLEdBQWlCdkIsa0JBQWpCIiwiZmlsZSI6IlRyYW5zZm9ybVByb3BUeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRyYW5zZm9ybVByb3BUeXBlc1xuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBkZXByZWNhdGVkUHJvcFR5cGUgPSByZXF1aXJlKCdkZXByZWNhdGVkUHJvcFR5cGUnKTtcblxudmFyIFRyYW5zZm9ybU1hdHJpeFByb3BUeXBlID0gZnVuY3Rpb24oXG4gIHByb3BzIDogT2JqZWN0LFxuICBwcm9wTmFtZSA6IHN0cmluZyxcbiAgY29tcG9uZW50TmFtZSA6IHN0cmluZ1xuKSA6ID9FcnJvciB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgJ1RoZSB0cmFuc2Zvcm1NYXRyaXggc3R5bGUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gJyArXG4gICAgICAnVXNlIGB0cmFuc2Zvcm06IFt7IG1hdHJpeDogLi4uIH1dYCBpbnN0ZWFkLidcbiAgICApO1xuICB9XG59O1xuXG52YXIgRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlID0gZnVuY3Rpb24oXG4gIHByb3BzIDogT2JqZWN0LFxuICBwcm9wTmFtZSA6IHN0cmluZyxcbiAgY29tcG9uZW50TmFtZSA6IHN0cmluZ1xuKSA6ID9FcnJvciB7XG4gIGlmIChwcm9wc1twcm9wTmFtZV0pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgJ1RoZSBkZWNvbXBvc2VkTWF0cml4IHN0eWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuICcgK1xuICAgICAgJ1VzZSBgdHJhbnNmb3JtOiBbLi4uXWAgaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxufTtcblxudmFyIFRyYW5zZm9ybVByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIGB0cmFuc2Zvcm1gIGFjY2VwdHMgYW4gYXJyYXkgb2YgdHJhbnNmb3JtYXRpb24gb2JqZWN0cy4gRWFjaCBvYmplY3Qgc3BlY2lmaWVzXG4gICAqIHRoZSBwcm9wZXJ0eSB0aGF0IHdpbGwgYmUgdHJhbnNmb3JtZWQgYXMgdGhlIGtleSwgYW5kIHRoZSB2YWx1ZSB0byB1c2UgaW4gdGhlXG4gICAqIHRyYW5zZm9ybWF0aW9uLiBPYmplY3RzIHNob3VsZCBub3QgYmUgY29tYmluZWQuIFVzZSBhIHNpbmdsZSBrZXkvdmFsdWUgcGFpclxuICAgKiBwZXIgb2JqZWN0LlxuICAgKlxuICAgKiBUaGUgcm90YXRlIHRyYW5zZm9ybWF0aW9ucyByZXF1aXJlIGEgc3RyaW5nIHNvIHRoYXQgdGhlIHRyYW5zZm9ybSBtYXkgYmVcbiAgICogZXhwcmVzc2VkIGluIGRlZ3JlZXMgKGRlZykgb3IgcmFkaWFucyAocmFkKS4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqIGB0cmFuc2Zvcm0oW3sgcm90YXRlWDogJzQ1ZGVnJyB9LCB7IHJvdGF0ZVo6ICcwLjc4NTM5OHJhZCcgfV0pYFxuICAgKlxuICAgKiBUaGUgc2tldyB0cmFuc2Zvcm1hdGlvbnMgcmVxdWlyZSBhIHN0cmluZyBzbyB0aGF0IHRoZSB0cmFuc2Zvcm0gbWF5IGJlXG4gICAqIGV4cHJlc3NlZCBpbiBkZWdyZWVzIChkZWcpLiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogYHRyYW5zZm9ybShbeyBza2V3WDogJzQ1ZGVnJyB9XSlgXG4gICAqL1xuICB0cmFuc2Zvcm06IFJlYWN0UHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUmVhY3RQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtwZXJzcGVjdGl2ZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7cm90YXRlOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVYOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVZOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtyb3RhdGVaOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtzY2FsZTogUmVhY3RQcm9wVHlwZXMubnVtYmVyfSksXG4gICAgICBSZWFjdFByb3BUeXBlcy5zaGFwZSh7c2NhbGVYOiBSZWFjdFByb3BUeXBlcy5udW1iZXJ9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtzY2FsZVk6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3RyYW5zbGF0ZVg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3RyYW5zbGF0ZVk6IFJlYWN0UHJvcFR5cGVzLm51bWJlcn0pLFxuICAgICAgUmVhY3RQcm9wVHlwZXMuc2hhcGUoe3NrZXdYOiBSZWFjdFByb3BUeXBlcy5zdHJpbmd9KSxcbiAgICAgIFJlYWN0UHJvcFR5cGVzLnNoYXBlKHtza2V3WTogUmVhY3RQcm9wVHlwZXMuc3RyaW5nfSlcbiAgICBdKVxuICApLFxuXG4gIC8qKlxuICAgKiBEZXByZWNhdGVkLiBVc2UgdGhlIHRyYW5zZm9ybSBwcm9wIGluc3RlYWQuXG4gICAqL1xuICB0cmFuc2Zvcm1NYXRyaXg6IFRyYW5zZm9ybU1hdHJpeFByb3BUeXBlLFxuICAvKipcbiAgICogRGVwcmVjYXRlZC4gVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLlxuICAgKi9cbiAgZGVjb21wb3NlZE1hdHJpeDogRGVjb21wb3NlZE1hdHJpeFByb3BUeXBlLFxuXG4gIC8qIERlcHJlY2F0ZWQgdHJhbnNmb3JtIHByb3BzIHVzZWQgb24gQW5kcm9pZCBvbmx5ICovXG4gIHNjYWxlWDogZGVwcmVjYXRlZFByb3BUeXBlKFJlYWN0UHJvcFR5cGVzLm51bWJlciwgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nKSxcbiAgc2NhbGVZOiBkZXByZWNhdGVkUHJvcFR5cGUoUmVhY3RQcm9wVHlwZXMubnVtYmVyLCAnVXNlIHRoZSB0cmFuc2Zvcm0gcHJvcCBpbnN0ZWFkLicpLFxuICByb3RhdGlvbjogZGVwcmVjYXRlZFByb3BUeXBlKFJlYWN0UHJvcFR5cGVzLm51bWJlciwgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nKSxcbiAgdHJhbnNsYXRlWDogZGVwcmVjYXRlZFByb3BUeXBlKFJlYWN0UHJvcFR5cGVzLm51bWJlciwgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nKSxcbiAgdHJhbnNsYXRlWTogZGVwcmVjYXRlZFByb3BUeXBlKFJlYWN0UHJvcFR5cGVzLm51bWJlciwgJ1VzZSB0aGUgdHJhbnNmb3JtIHByb3AgaW5zdGVhZC4nKSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtUHJvcFR5cGVzO1xuIl19