f978553ecb1b4b4521ecef95fccb8bb4
"use strict";

var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Helper = {
  isNull: function (el) {
    var result = false;

    if (el === null || typeof el === 'undefined') {
      result = true;
    }

    return result;
  },
  parseLocation: function (location) {
    var result = null;

    if (!this.isNull(location)) {
      result = {
        lon: location.coords.longitude,
        lat: location.coords.latitude
      };
    } else {
      result = {
        lon: null,
        lat: null
      };
    }

    return result;
  },
  concatenate: function (delimiter, parts) {
    var result = "";

    if (!this.isNull(parts)) {
      parts.forEach(function (part, index) {
        result += part + delimiter;
      });
    }

    return result;
  },
  url_params: function (obj) {
    var result = "";

    if (!this.isNull(obj)) {
      result = Object.keys(obj).map(function (key) {
        return obj[key] instanceof Object ? key + '=' + JSON.stringify(obj[key]) : key + '=' + obj[key];
      }).join('&');
    }

    return result;
  },
  is_empty: function (str) {
    var result = false;

    if (this.isNull(str) || str === "" || !str) {
      result = true;
    }

    return result;
  },
  encode: function (str) {
    var result = "";

    if (!this.isNull(str)) {
      result = encodeURIComponent(str);
    }

    return result;
  },
  to_json: function (str) {
    var result = null;

    if (!this.isNull(str)) {
      result = JSON.parse('{"' + decodeURI(str).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g, '":"') + '"}');
    }

    return result;
  },
  join_objects: function (first, second) {
    return __assign({}, first, second);
  },
  format_date: function (format, date) {
    var result = null;

    if (!this.is_empty(format) && !this.isNull(date)) {
      switch (format) {
        case "h:m":
          var tempMinutes = date.getMinutes();
          var mins = tempMinutes < 10 ? "0" + tempMinutes : tempMinutes;
          result = date.getHours() + ":" + mins;
          break;

        case "m":
          result = date.getMinutes();
          break;

        case "iso":
          result = date.toISOString();
          break;

        default:
          result = date.getHours() + ":" + date.getMinutes();
          break;
      }
    }

    return result;
  },
  get_time_difference: function (start, end) {
    console.log("date", start, end);
    var date_now = start.getTime();
    var date_future = end.getTime();
    var delta = Math.abs(date_future - date_now) / 1000; // calculate (and subtract) whole days

    var days = Math.floor(delta / 86400);
    delta -= days * 86400; // calculate (and subtract) whole hours

    var hours = Math.floor(delta / 3600) % 24;
    delta -= hours * 3600; // calculate (and subtract) whole minutes

    var minutes = Math.floor(delta / 60) % 60;
    delta -= minutes * 60;
    var mins = minutes < 10 ? '0' + minutes : minutes;
    var hrs = hours < 10 ? '0' + hours : hours;
    return hrs + ":" + mins;
  },
  add_interval: function (time, interval) {
    return this.format_date("h:m", new Date(time.getTime() + interval * 60000));
  },
  with_comma: function (first, second) {
    return first + ", " + second;
  },
  to_fixed: function (number) {
    var result = "0";

    if (!this.isNull(number)) {
      result = number.toFixed(7);
    }

    return result;
  },
  get_interval_value: function (language, chosen_interval) {
    var result = "";

    if (chosen_interval === 60) {
      // 1 hour
      result = "1" + language.time_unit_hour_label_single;
    } else if (chosen_interval === 120) {
      //2 hours
      result = "2" + language.time_unit_hour_label;
    } else {
      result = chosen_interval + language.time_unit_minute_label;
    }

    return result;
  }
}; //# sourceMappingURL=helper.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,