{"version":3,"sources":["RCTDeviceEventEmitter.js"],"names":["EventEmitter","require","EventSubscriptionVendor","checkNativeEventModule","eventType","lastIndexOf","Error","RCTDeviceEventEmitter","sharedSubscriber","listener","context","__DEV__","subscription","emitter","removeSubscription","module","exports"],"mappings":";AASA;;;;;;;;;;;;AAEA,IAAMA,eAAeC,QAAQ,cAAR,CAArB;AACA,IAAMC,0BAA0BD,QAAQ,yBAAR,CAAhC;;AAIA,SAASE,sBAAT,CAAgCC,SAAhC,EAAoD;AAClD,MAAIA,SAAJ,EAAe;AACb,QAAIA,UAAUC,WAAV,CAAsB,WAAtB,EAAmC,CAAnC,MAA0C,CAA9C,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CAAU,MAAMF,SAAN,GAAkB,0DAA5B,CAAN;AACD;AACD,QAAIA,UAAUC,WAAV,CAAsB,UAAtB,EAAkC,CAAlC,MAAyC,CAA7C,EAAgD;AAC9C,YAAM,IAAIC,KAAJ,CAAU,MAAMF,SAAN,GAAkB,sDAA5B,CAAN;AACD;AACD,QAAIA,cAAc,mBAAd,IAAqCA,cAAc,eAAvD,EAAwE;AACtE,YAAM,IAAIE,KAAJ,CAAU,MAAMF,SAAN,GAAkB,sDAA5B,CAAN;AACD;AACF;AACF;;IAMKG,qB;;;AAIJ,mCAAc;AAAA;;AACZ,QAAMC,mBAAmB,IAAIN,uBAAJ,EAAzB;;AADY,8IAENM,gBAFM;;AAGZ,UAAKA,gBAAL,GAAwBA,gBAAxB;AAHY;AAIb;;;;gCAGWJ,S,EAAmBK,Q,EAAoBC,O,EAAuC;AACxF,UAAIC,OAAJ,EAAa;AACXR,+BAAuBC,SAAvB;AACD;AACD,uJAAyBA,SAAzB,EAAoCK,QAApC,EAA8CC,OAA9C;AACD;;;uCAEkBN,S,EAAoB;AACrC,UAAIO,OAAJ,EAAa;AACXR,+BAAuBC,SAAvB;AACD;AACD,uJAAyBA,SAAzB;AACD;;;uCAEkBQ,Y,EAAmC;AACpD,UAAIA,aAAaC,OAAb,KAAyB,IAA7B,EAAmC;AACjCD,qBAAaC,OAAb,CAAqBC,kBAArB,CAAwCF,YAAxC;AACD,OAFD,MAEO;AACL,yJAAyBA,YAAzB;AACD;AACF;;;;EA/BiCZ,Y;;AAkCpCe,OAAOC,OAAP,GAAiB,IAAIT,qBAAJ,EAAjB","file":"RCTDeviceEventEmitter.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule RCTDeviceEventEmitter\n * @flow\n */\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst EventSubscriptionVendor = require('EventSubscriptionVendor');\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\nfunction checkNativeEventModule(eventType: ?string) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');\n    }\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');\n    }\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n\n  addListener(eventType: string, listener: Function, context: ?Object): EmitterSubscription {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: ?string) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nmodule.exports = new RCTDeviceEventEmitter();\n"]}