66b2132525c56420e6e894ad1cf4404b

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('EventEmitter');
var EventSubscriptionVendor = require('EventSubscriptionVendor');

function checkNativeEventModule(eventType) {
  if (eventType) {
    if (eventType.lastIndexOf('statusBar', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
    }
    if (eventType.lastIndexOf('keyboard', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
    }
    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
      throw new Error('`' + eventType + '` event should be registered via the AppState module');
    }
  }
}

var RCTDeviceEventEmitter = function (_EventEmitter) {
  _inherits(RCTDeviceEventEmitter, _EventEmitter);

  function RCTDeviceEventEmitter() {
    _classCallCheck(this, RCTDeviceEventEmitter);

    var sharedSubscriber = new EventSubscriptionVendor();

    var _this = _possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

    _this.sharedSubscriber = sharedSubscriber;
    return _this;
  }

  _createClass(RCTDeviceEventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      return _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (subscription.emitter !== this) {
        subscription.emitter.removeSubscription(subscription);
      } else {
        _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
      }
    }
  }]);

  return RCTDeviceEventEmitter;
}(EventEmitter);

module.exports = new RCTDeviceEventEmitter();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJDVERldmljZUV2ZW50RW1pdHRlci5qcyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IiLCJjaGVja05hdGl2ZUV2ZW50TW9kdWxlIiwiZXZlbnRUeXBlIiwibGFzdEluZGV4T2YiLCJFcnJvciIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsInNoYXJlZFN1YnNjcmliZXIiLCJsaXN0ZW5lciIsImNvbnRleHQiLCJfX0RFVl9fIiwic3Vic2NyaXB0aW9uIiwiZW1pdHRlciIsInJlbW92ZVN1YnNjcmlwdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFTQTs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsZUFBZUMsUUFBUSxjQUFSLENBQXJCO0FBQ0EsSUFBTUMsMEJBQTBCRCxRQUFRLHlCQUFSLENBQWhDOztBQUlBLFNBQVNFLHNCQUFULENBQWdDQyxTQUFoQyxFQUFvRDtBQUNsRCxNQUFJQSxTQUFKLEVBQWU7QUFDYixRQUFJQSxVQUFVQyxXQUFWLENBQXNCLFdBQXRCLEVBQW1DLENBQW5DLE1BQTBDLENBQTlDLEVBQWlEO0FBQy9DLFlBQU0sSUFBSUMsS0FBSixDQUFVLE1BQU1GLFNBQU4sR0FBa0IsMERBQTVCLENBQU47QUFDRDtBQUNELFFBQUlBLFVBQVVDLFdBQVYsQ0FBc0IsVUFBdEIsRUFBa0MsQ0FBbEMsTUFBeUMsQ0FBN0MsRUFBZ0Q7QUFDOUMsWUFBTSxJQUFJQyxLQUFKLENBQVUsTUFBTUYsU0FBTixHQUFrQixzREFBNUIsQ0FBTjtBQUNEO0FBQ0QsUUFBSUEsY0FBYyxtQkFBZCxJQUFxQ0EsY0FBYyxlQUF2RCxFQUF3RTtBQUN0RSxZQUFNLElBQUlFLEtBQUosQ0FBVSxNQUFNRixTQUFOLEdBQWtCLHNEQUE1QixDQUFOO0FBQ0Q7QUFDRjtBQUNGOztJQU1LRyxxQjs7O0FBSUosbUNBQWM7QUFBQTs7QUFDWixRQUFNQyxtQkFBbUIsSUFBSU4sdUJBQUosRUFBekI7O0FBRFksOElBRU5NLGdCQUZNOztBQUdaLFVBQUtBLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFIWTtBQUliOzs7O2dDQUdXSixTLEVBQW1CSyxRLEVBQW9CQyxPLEVBQXVDO0FBQ3hGLFVBQUlDLE9BQUosRUFBYTtBQUNYUiwrQkFBdUJDLFNBQXZCO0FBQ0Q7QUFDRCx1SkFBeUJBLFNBQXpCLEVBQW9DSyxRQUFwQyxFQUE4Q0MsT0FBOUM7QUFDRDs7O3VDQUVrQk4sUyxFQUFvQjtBQUNyQyxVQUFJTyxPQUFKLEVBQWE7QUFDWFIsK0JBQXVCQyxTQUF2QjtBQUNEO0FBQ0QsdUpBQXlCQSxTQUF6QjtBQUNEOzs7dUNBRWtCUSxZLEVBQW1DO0FBQ3BELFVBQUlBLGFBQWFDLE9BQWIsS0FBeUIsSUFBN0IsRUFBbUM7QUFDakNELHFCQUFhQyxPQUFiLENBQXFCQyxrQkFBckIsQ0FBd0NGLFlBQXhDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wseUpBQXlCQSxZQUF6QjtBQUNEO0FBQ0Y7Ozs7RUEvQmlDWixZOztBQWtDcENlLE9BQU9DLE9BQVAsR0FBaUIsSUFBSVQscUJBQUosRUFBakIiLCJmaWxlIjoiUkNURGV2aWNlRXZlbnRFbWl0dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUkNURGV2aWNlRXZlbnRFbWl0dGVyXG4gKiBAZmxvd1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ0V2ZW50RW1pdHRlcicpO1xuY29uc3QgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IgPSByZXF1aXJlKCdFdmVudFN1YnNjcmlwdGlvblZlbmRvcicpO1xuXG5pbXBvcnQgdHlwZSBFbWl0dGVyU3Vic2NyaXB0aW9uIGZyb20gJ0VtaXR0ZXJTdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBjaGVja05hdGl2ZUV2ZW50TW9kdWxlKGV2ZW50VHlwZTogP3N0cmluZykge1xuICBpZiAoZXZlbnRUeXBlKSB7XG4gICAgaWYgKGV2ZW50VHlwZS5sYXN0SW5kZXhPZignc3RhdHVzQmFyJywgMCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYCcgKyBldmVudFR5cGUgKyAnYCBldmVudCBzaG91bGQgYmUgcmVnaXN0ZXJlZCB2aWEgdGhlIFN0YXR1c0JhcklPUyBtb2R1bGUnKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50VHlwZS5sYXN0SW5kZXhPZigna2V5Ym9hcmQnLCAwKSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgJyArIGV2ZW50VHlwZSArICdgIGV2ZW50IHNob3VsZCBiZSByZWdpc3RlcmVkIHZpYSB0aGUgS2V5Ym9hcmQgbW9kdWxlJyk7XG4gICAgfVxuICAgIGlmIChldmVudFR5cGUgPT09ICdhcHBTdGF0ZURpZENoYW5nZScgfHwgZXZlbnRUeXBlID09PSAnbWVtb3J5V2FybmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYCcgKyBldmVudFR5cGUgKyAnYCBldmVudCBzaG91bGQgYmUgcmVnaXN0ZXJlZCB2aWEgdGhlIEFwcFN0YXRlIG1vZHVsZScpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERlcHJlY2F0ZWQgLSBzdWJjbGFzcyBOYXRpdmVFdmVudEVtaXR0ZXIgdG8gY3JlYXRlIGdyYW51bGFyIGV2ZW50IG1vZHVsZXMgaW5zdGVhZCBvZlxuICogYWRkaW5nIGFsbCBldmVudCBsaXN0ZW5lcnMgZGlyZWN0bHkgdG8gUkNURGV2aWNlRXZlbnRFbWl0dGVyLlxuICovXG5jbGFzcyBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuXG4gIHNoYXJlZFN1YnNjcmliZXI6IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHNoYXJlZFN1YnNjcmliZXIgPSBuZXcgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IoKTtcbiAgICBzdXBlcihzaGFyZWRTdWJzY3JpYmVyKTtcbiAgICB0aGlzLnNoYXJlZFN1YnNjcmliZXIgPSBzaGFyZWRTdWJzY3JpYmVyO1xuICB9XG5cblxuICBhZGRMaXN0ZW5lcihldmVudFR5cGU6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uLCBjb250ZXh0OiA/T2JqZWN0KTogRW1pdHRlclN1YnNjcmlwdGlvbiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGNoZWNrTmF0aXZlRXZlbnRNb2R1bGUoZXZlbnRUeXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmFkZExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIGNvbnRleHQpO1xuICB9XG5cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50VHlwZTogP3N0cmluZykge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjaGVja05hdGl2ZUV2ZW50TW9kdWxlKGV2ZW50VHlwZSk7XG4gICAgfVxuICAgIHN1cGVyLnJlbW92ZUFsbExpc3RlbmVycyhldmVudFR5cGUpO1xuICB9XG5cbiAgcmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbjogRW1pdHRlclN1YnNjcmlwdGlvbikge1xuICAgIGlmIChzdWJzY3JpcHRpb24uZW1pdHRlciAhPT0gdGhpcykge1xuICAgICAgc3Vic2NyaXB0aW9uLmVtaXR0ZXIucmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyLnJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBSQ1REZXZpY2VFdmVudEVtaXR0ZXIoKTtcbiJdfQ==