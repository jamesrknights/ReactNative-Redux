9b22dacef169a1e76745e531a1a90f80
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Location =
/** @class */
function () {
  function Location(location) {
    this.longitude = 0;
    this.latitude = 0;
    this.accuracy = 0;
    this.altitude = 0;
    this.timestamp = 0;
    this.speed = 0;
    this.heading = 0;
    this.mocked = false;
    this.error = null;

    if (location) {
      this.longitude = location.coords.longitude;
      this.latitude = location.coords.latitude;
      this.accuracy = location.coords.accuracy;
      this.altitude = location.coords.altitude;
      this.timestamp = location.timestamp;
      this.speed = location.coords.speed;
      this.heading = location.coords.heading;
      this.mocked = location.mocked;
    }
  }

  Location.prototype.get = function (key) {
    var result = null;

    switch (key) {
      case "longitude":
        result = this.longitude;
        break;

      case "latitude":
        result = this.latitude;
        break;

      case "altitude":
        result = this.altitude;
        break;

      case "accuracy":
        result = this.accuracy;
        break;

      case "speed":
        result = this.speed;
        break;

      case "header":
        result = this.heading;
        break;

      case "timestamp":
        result = this.timestamp;
        break;

      case "mocked":
        result = this.mocked;
        break;

      case "error":
        result = this.mocked;
        break;

      default:
        break;
    }

    return result;
  };

  Location.prototype.set = function (key, value) {
    var result = null;

    switch (key) {
      case "longitude":
        this.longitude = value;
        break;

      case "latitude":
        this.latitude = value;
        break;

      case "altitude":
        this.altitude = value;
        break;

      case "accuracy":
        this.accuracy = value;
        break;

      case "speed":
        this.speed = value;
        break;

      case "header":
        this.heading = value;
        break;

      case "timestamp":
        this.timestamp = value;
        break;

      case "mocked":
        this.mocked = value;
        break;

      case "error":
        this.error = value;
        break;

      default:
        break;
    }

    return result;
  };

  Location.prototype.setList = function (location) {
    if (location) {
      this.longitude = location.coords.longitude;
      this.latitude = location.coords.latitude;
      this.accuracy = location.coords.accuracy;
      this.altitude = location.coords.altitude;
      this.timestamp = location.timestamp;
      this.speed = location.coords.speed;
      this.heading = location.coords.heading;
      this.mocked = location.mocked;
    }
  };

  return Location;
}();

exports.Location = Location; //# sourceMappingURL=location.model.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,