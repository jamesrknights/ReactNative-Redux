{"version":3,"sources":["View.js"],"names":["Platform","require","React","ReactNative","ReactNativeStyleAttributes","ReactNativeViewAttributes","ViewPropTypes","ViewContextTypes","invariant","requireNativeComponent","View","viewConfig","uiViewClassName","validAttributes","RCTView","isInAParentText","context","OS","props","NativeComponent","propTypes","childContextTypes","nativeOnly","nativeBackgroundAndroid","nativeForegroundAndroid","__DEV__","UIManager","viewConfigs","prop","nativeProps","viewAny","Error","ViewToExport","module","exports"],"mappings":";AAUA;;;;;;;;;;AAEA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,cAAcF,QAAQ,aAAR,CAApB;AACA,IAAMG,6BAA6BH,QAAQ,4BAAR,CAAnC;AACA,IAAMI,4BAA4BJ,QAAQ,2BAAR,CAAlC;AACA,IAAMK,gBAAgBL,QAAQ,eAAR,CAAtB;;eAC2BA,QAAQ,aAAR,C;IAApBM,gB,YAAAA,gB;;AACP,IAAMC,YAAYP,QAAQ,oBAAR,CAAlB;AACA,IAAMQ,yBAAyBR,QAAQ,wBAAR,CAA/B;;IAcMS,I;;;;;;;;;;;;;;kLAIJC,U,GAAa;AACXC,uBAAiB,SADN;AAEXC,uBAAiBR,0BAA0BS;AAFhC,K;;;;;sCAKuB;AAClC,aAAO;AACLC,yBAAiB;AADZ,OAAP;AAGD;;;6BAEQ;AACPP,gBACE,EAAE,KAAKQ,OAAL,CAAaD,eAAb,IAAgCf,SAASiB,EAAT,KAAgB,SAAlD,CADF,EAEE,8DAFF;;AASA,aAAO,oBAAC,OAAD,EAAa,KAAKC,KAAlB,CAAP;AACD;;;;EA1BgBf,YAAYgB,e;;AAAzBT,I,CACGU,S,GAAYd,a;AADfI,I,CAEGW,iB,GAAoBd,gB;;;AA2B7B,IAAMO,UAAUL,uBAAuB,SAAvB,EAAkCC,IAAlC,EAAwC;AACtDY,cAAY;AACVC,6BAAyB,IADf;AAEVC,6BAAyB;AAFf;AAD0C,CAAxC,CAAhB;;AAOA,IAAIC,OAAJ,EAAa;AACX,MAAMC,YAAYzB,QAAQ,WAAR,CAAlB;AACA,MAAMU,aACHe,UAAUC,WAAV,IAAyBD,UAAUC,WAAV,CAAsBb,OAAhD,IAA4D,EAD9D;AAEA,OAAK,IAAMc,IAAX,IAAmBjB,WAAWkB,WAA9B,EAA2C;AACzC,QAAMC,UAAepB,IAArB;AACA,QAAI,CAACoB,QAAQV,SAAR,CAAkBQ,IAAlB,CAAD,IAA4B,CAACxB,2BAA2BwB,IAA3B,CAAjC,EAAmE;AACjE,YAAM,IAAIG,KAAJ,CACJ,+CAA+CH,IAA/C,GAAsD,GADlD,CAAN;AAGD;AACF;AACF;;AAED,IAAII,eAAelB,OAAnB;AACA,IAAIW,OAAJ,EAAa;AACXO,iBAAetB,IAAf;AACD;;AAGDuB,OAAOC,OAAP,GAAmBF,YAAnB","file":"View.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule View\n * @flow\n * @format\n */\n'use strict';\n\nconst Platform = require('Platform');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst ViewPropTypes = require('ViewPropTypes');\nconst {ViewContextTypes} = require('ViewContext');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type {ViewProps} from 'ViewPropTypes';\nimport type {ViewChildContext} from 'ViewContext';\n\nexport type Props = ViewProps;\n\n/**\n * The most fundamental component for building a UI, View is a container that\n * supports layout with flexbox, style, some touch handling, and accessibility\n * controls.\n *\n * @see http://facebook.github.io/react-native/docs/view.html\n */\nclass View extends ReactNative.NativeComponent<Props> {\n  static propTypes = ViewPropTypes;\n  static childContextTypes = ViewContextTypes;\n\n  viewConfig = {\n    uiViewClassName: 'RCTView',\n    validAttributes: ReactNativeViewAttributes.RCTView,\n  };\n\n  getChildContext(): ViewChildContext {\n    return {\n      isInAParentText: false,\n    };\n  }\n\n  render() {\n    invariant(\n      !(this.context.isInAParentText && Platform.OS === 'android'),\n      'Nesting of <View> within <Text> is not supported on Android.',\n    );\n\n    // WARNING: This method will not be used in production mode as in that mode we\n    // replace wrapper component View with generated native wrapper RCTView. Avoid\n    // adding functionality this component that you'd want to be available in both\n    // dev and prod modes.\n    return <RCTView {...this.props} />;\n  }\n}\n\nconst RCTView = requireNativeComponent('RCTView', View, {\n  nativeOnly: {\n    nativeBackgroundAndroid: true,\n    nativeForegroundAndroid: true,\n  },\n});\n\nif (__DEV__) {\n  const UIManager = require('UIManager');\n  const viewConfig =\n    (UIManager.viewConfigs && UIManager.viewConfigs.RCTView) || {};\n  for (const prop in viewConfig.nativeProps) {\n    const viewAny: any = View; // Appease flow\n    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {\n      throw new Error(\n        'View is missing propType for native prop `' + prop + '`',\n      );\n    }\n  }\n}\n\nlet ViewToExport = RCTView;\nif (__DEV__) {\n  ViewToExport = View;\n}\n\n// No one should depend on the DEV-mode createClass View wrapper.\nmodule.exports = ((ViewToExport: any): typeof View);\n"]}