ac70584acd4915cad4ba01ff888906b9

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require('ColorPropType');
var ReactPropTypes = require('prop-types');
var ViewStylePropTypes = require('ViewStylePropTypes');

var TextStylePropTypes = _extends({}, ViewStylePropTypes, {

  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),

  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),

  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({ width: ReactPropTypes.number, height: ReactPropTypes.number }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,

  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,

  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),

  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),

  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),

  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),

  textDecorationColor: ColorPropType,

  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIlJlYWN0UHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiY29sb3IiLCJmb250RmFtaWx5Iiwic3RyaW5nIiwiZm9udFNpemUiLCJudW1iZXIiLCJmb250U3R5bGUiLCJvbmVPZiIsImZvbnRXZWlnaHQiLCJmb250VmFyaWFudCIsImFycmF5T2YiLCJ0ZXh0U2hhZG93T2Zmc2V0Iiwic2hhcGUiLCJ3aWR0aCIsImhlaWdodCIsInRleHRTaGFkb3dSYWRpdXMiLCJ0ZXh0U2hhZG93Q29sb3IiLCJsZXR0ZXJTcGFjaW5nIiwibGluZUhlaWdodCIsInRleHRBbGlnbiIsInRleHRBbGlnblZlcnRpY2FsIiwiaW5jbHVkZUZvbnRQYWRkaW5nIiwiYm9vbCIsInRleHREZWNvcmF0aW9uTGluZSIsInRleHREZWNvcmF0aW9uU3R5bGUiLCJ0ZXh0RGVjb3JhdGlvbkNvbG9yIiwid3JpdGluZ0RpcmVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFTQTs7OztBQUVBLElBQU1BLGdCQUFnQkMsUUFBUSxlQUFSLENBQXRCO0FBQ0EsSUFBTUMsaUJBQWlCRCxRQUFRLFlBQVIsQ0FBdkI7QUFDQSxJQUFNRSxxQkFBcUJGLFFBQVEsb0JBQVIsQ0FBM0I7O0FBRUEsSUFBTUcsa0NBQ0RELGtCQURDOztBQUdKRSxTQUFPTCxhQUhIO0FBSUpNLGNBQVlKLGVBQWVLLE1BSnZCO0FBS0pDLFlBQVVOLGVBQWVPLE1BTHJCO0FBTUpDLGFBQVdSLGVBQWVTLEtBQWYsQ0FBcUIsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUFyQixDQU5QOztBQVlKQyxjQUFZVixlQUFlUyxLQUFmLENBQ1YsQ0FBQyxRQUFELEVBQXVCLE1BQXZCLEVBQ0MsS0FERCxFQUNRLEtBRFIsRUFDZSxLQURmLEVBQ3NCLEtBRHRCLEVBQzZCLEtBRDdCLEVBQ29DLEtBRHBDLEVBQzJDLEtBRDNDLEVBQ2tELEtBRGxELEVBQ3lELEtBRHpELENBRFUsQ0FaUjs7QUFtQkpFLGVBQWFYLGVBQWVZLE9BQWYsQ0FDWFosZUFBZVMsS0FBZixDQUFxQixDQUNuQixZQURtQixFQUVuQixlQUZtQixFQUduQixhQUhtQixFQUluQixjQUptQixFQUtuQixtQkFMbUIsQ0FBckIsQ0FEVyxDQW5CVDtBQTRCSkksb0JBQWtCYixlQUFlYyxLQUFmLENBQ2hCLEVBQUNDLE9BQU9mLGVBQWVPLE1BQXZCLEVBQStCUyxRQUFRaEIsZUFBZU8sTUFBdEQsRUFEZ0IsQ0E1QmQ7QUErQkpVLG9CQUFrQmpCLGVBQWVPLE1BL0I3QjtBQWdDSlcsbUJBQWlCcEIsYUFoQ2I7O0FBb0NKcUIsaUJBQWVuQixlQUFlTyxNQXBDMUI7QUFxQ0phLGNBQVlwQixlQUFlTyxNQXJDdkI7O0FBMENKYyxhQUFXckIsZUFBZVMsS0FBZixDQUNULENBQUMsTUFBRCxFQUFxQixNQUFyQixFQUE2QixPQUE3QixFQUFzQyxRQUF0QyxFQUFnRCxTQUFoRCxDQURTLENBMUNQOztBQWdESmEscUJBQW1CdEIsZUFBZVMsS0FBZixDQUNqQixDQUFDLE1BQUQsRUFBcUIsS0FBckIsRUFBNEIsUUFBNUIsRUFBc0MsUUFBdEMsQ0FEaUIsQ0FoRGY7O0FBeURKYyxzQkFBb0J2QixlQUFld0IsSUF6RC9CO0FBMERKQyxzQkFBb0J6QixlQUFlUyxLQUFmLENBQ2xCLENBQUMsTUFBRCxFQUFxQixXQUFyQixFQUFrQyxjQUFsQyxFQUFrRCx3QkFBbEQsQ0FEa0IsQ0ExRGhCOztBQWdFSmlCLHVCQUFxQjFCLGVBQWVTLEtBQWYsQ0FDbkIsQ0FBQyxPQUFELEVBQXNCLFFBQXRCLEVBQWdDLFFBQWhDLEVBQXlDLFFBQXpDLENBRG1CLENBaEVqQjs7QUFzRUprQix1QkFBcUI3QixhQXRFakI7O0FBMEVKOEIsb0JBQWtCNUIsZUFBZVMsS0FBZixDQUNoQixDQUFDLE1BQUQsRUFBcUIsS0FBckIsRUFBNEIsS0FBNUIsQ0FEZ0I7QUExRWQsRUFBTjs7QUErRUFvQixPQUFPQyxPQUFQLEdBQWlCNUIsa0JBQWpCIiwiZmlsZSI6IlRleHRTdHlsZVByb3BUeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFRleHRTdHlsZVByb3BUeXBlc1xuICogQGZsb3dcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb2xvclByb3BUeXBlID0gcmVxdWlyZSgnQ29sb3JQcm9wVHlwZScpO1xuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBWaWV3U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdWaWV3U3R5bGVQcm9wVHlwZXMnKTtcblxuY29uc3QgVGV4dFN0eWxlUHJvcFR5cGVzID0ge1xuICAuLi5WaWV3U3R5bGVQcm9wVHlwZXMsXG5cbiAgY29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIGZvbnRGYW1pbHk6IFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcbiAgZm9udFNpemU6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgZm9udFN0eWxlOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ25vcm1hbCcsICdpdGFsaWMnXSksXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgZm9udCB3ZWlnaHQuIFRoZSB2YWx1ZXMgJ25vcm1hbCcgYW5kICdib2xkJyBhcmUgc3VwcG9ydGVkIGZvclxuICAgKiBtb3N0IGZvbnRzLiBOb3QgYWxsIGZvbnRzIGhhdmUgYSB2YXJpYW50IGZvciBlYWNoIG9mIHRoZSBudW1lcmljIHZhbHVlcyxcbiAgICogaW4gdGhhdCBjYXNlIHRoZSBjbG9zZXN0IG9uZSBpcyBjaG9zZW4uXG4gICAqL1xuICBmb250V2VpZ2h0OiBSZWFjdFByb3BUeXBlcy5vbmVPZihcbiAgICBbJ25vcm1hbCcgLypkZWZhdWx0Ki8sICdib2xkJyxcbiAgICAgJzEwMCcsICcyMDAnLCAnMzAwJywgJzQwMCcsICc1MDAnLCAnNjAwJywgJzcwMCcsICc4MDAnLCAnOTAwJ11cbiAgKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGZvbnRWYXJpYW50OiBSZWFjdFByb3BUeXBlcy5hcnJheU9mKFxuICAgIFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgICdzbWFsbC1jYXBzJyxcbiAgICAgICdvbGRzdHlsZS1udW1zJyxcbiAgICAgICdsaW5pbmctbnVtcycsXG4gICAgICAndGFidWxhci1udW1zJyxcbiAgICAgICdwcm9wb3J0aW9uYWwtbnVtcycsXG4gICAgXSlcbiAgKSxcbiAgdGV4dFNoYWRvd09mZnNldDogUmVhY3RQcm9wVHlwZXMuc2hhcGUoXG4gICAge3dpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsIGhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyfVxuICApLFxuICB0ZXh0U2hhZG93UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIHRleHRTaGFkb3dDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGxldHRlclNwYWNpbmc6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgbGluZUhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRleHQgYWxpZ25tZW50LiBUaGUgdmFsdWUgJ2p1c3RpZnknIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGlPUyBhbmRcbiAgICogZmFsbGJhY2tzIHRvIGBsZWZ0YCBvbiBBbmRyb2lkLlxuICAgKi9cbiAgdGV4dEFsaWduOiBSZWFjdFByb3BUeXBlcy5vbmVPZihcbiAgICBbJ2F1dG8nIC8qZGVmYXVsdCovLCAnbGVmdCcsICdyaWdodCcsICdjZW50ZXInLCAnanVzdGlmeSddXG4gICksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgdGV4dEFsaWduVmVydGljYWw6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFxuICAgIFsnYXV0bycgLypkZWZhdWx0Ki8sICd0b3AnLCAnYm90dG9tJywgJ2NlbnRlciddXG4gICksXG4gIC8qKlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byByZW1vdmUgZXh0cmEgZm9udCBwYWRkaW5nIGludGVuZGVkIHRvIG1ha2Ugc3BhY2UgZm9yIGNlcnRhaW4gYXNjZW5kZXJzIC8gZGVzY2VuZGVycy5cbiAgICogV2l0aCBzb21lIGZvbnRzLCB0aGlzIHBhZGRpbmcgY2FuIG1ha2UgdGV4dCBsb29rIHNsaWdodGx5IG1pc2FsaWduZWQgd2hlbiBjZW50ZXJlZCB2ZXJ0aWNhbGx5LlxuICAgKiBGb3IgYmVzdCByZXN1bHRzIGFsc28gc2V0IGB0ZXh0QWxpZ25WZXJ0aWNhbGAgdG8gYGNlbnRlcmAuIERlZmF1bHQgaXMgdHJ1ZS5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIGluY2x1ZGVGb250UGFkZGluZzogUmVhY3RQcm9wVHlwZXMuYm9vbCxcbiAgdGV4dERlY29yYXRpb25MaW5lOiBSZWFjdFByb3BUeXBlcy5vbmVPZihcbiAgICBbJ25vbmUnIC8qZGVmYXVsdCovLCAndW5kZXJsaW5lJywgJ2xpbmUtdGhyb3VnaCcsICd1bmRlcmxpbmUgbGluZS10aHJvdWdoJ11cbiAgKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHRleHREZWNvcmF0aW9uU3R5bGU6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFxuICAgIFsnc29saWQnIC8qZGVmYXVsdCovLCAnZG91YmxlJywgJ2RvdHRlZCcsJ2Rhc2hlZCddXG4gICksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICB0ZXh0RGVjb3JhdGlvbkNvbG9yOiBDb2xvclByb3BUeXBlLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgd3JpdGluZ0RpcmVjdGlvbjogUmVhY3RQcm9wVHlwZXMub25lT2YoXG4gICAgWydhdXRvJyAvKmRlZmF1bHQqLywgJ2x0cicsICdydGwnXVxuICApLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0U3R5bGVQcm9wVHlwZXM7XG4iXX0=