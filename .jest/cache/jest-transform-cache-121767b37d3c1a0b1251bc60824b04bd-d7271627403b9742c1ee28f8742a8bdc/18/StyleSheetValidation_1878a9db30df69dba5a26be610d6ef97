e31af7ab1d595d212ab988f3473eb53a

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageStylePropTypes = require('ImageStylePropTypes');
var TextStylePropTypes = require('TextStylePropTypes');
var ViewStylePropTypes = require('ViewStylePropTypes');

var invariant = require('fbjs/lib/invariant');

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var StyleSheetValidation = function () {
  function StyleSheetValidation() {
    _classCallCheck(this, StyleSheetValidation);
  }

  _createClass(StyleSheetValidation, null, [{
    key: 'validateStyleProp',
    value: function validateStyleProp(prop, style, caller) {
      if (!__DEV__) {
        return;
      }
      if (allStylePropTypes[prop] === undefined) {
        var message1 = '"' + prop + '" is not a valid style property.';
        var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
        styleError(message1, style, caller, message2);
      }
      var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);
      if (error) {
        styleError(error.message, style, caller);
      }
    }
  }, {
    key: 'validateStyle',
    value: function validateStyle(name, styles) {
      if (!__DEV__) {
        return;
      }
      for (var prop in styles[name]) {
        StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
      }
    }
  }, {
    key: 'addValidStylePropTypes',
    value: function addValidStylePropTypes(stylePropTypes) {
      for (var key in stylePropTypes) {
        allStylePropTypes[key] = stylePropTypes[key];
      }
    }
  }]);

  return StyleSheetValidation;
}();

var styleError = function styleError(message1, style, caller, message2) {
  invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
};

var allStylePropTypes = {};

StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);

module.exports = StyleSheetValidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0eWxlU2hlZXRWYWxpZGF0aW9uLmpzIl0sIm5hbWVzIjpbIkltYWdlU3R5bGVQcm9wVHlwZXMiLCJyZXF1aXJlIiwiVGV4dFN0eWxlUHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJTdHlsZVNoZWV0VmFsaWRhdGlvbiIsInByb3AiLCJzdHlsZSIsImNhbGxlciIsIl9fREVWX18iLCJhbGxTdHlsZVByb3BUeXBlcyIsInVuZGVmaW5lZCIsIm1lc3NhZ2UxIiwibWVzc2FnZTIiLCJKU09OIiwic3RyaW5naWZ5IiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJzdHlsZUVycm9yIiwiZXJyb3IiLCJtZXNzYWdlIiwibmFtZSIsInN0eWxlcyIsInZhbGlkYXRlU3R5bGVQcm9wIiwic3R5bGVQcm9wVHlwZXMiLCJrZXkiLCJhZGRWYWxpZFN0eWxlUHJvcFR5cGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtBQVNBOzs7Ozs7QUFFQSxJQUFJQSxzQkFBc0JDLFFBQVEscUJBQVIsQ0FBMUI7QUFDQSxJQUFJQyxxQkFBcUJELFFBQVEsb0JBQVIsQ0FBekI7QUFDQSxJQUFJRSxxQkFBcUJGLFFBQVEsb0JBQVIsQ0FBekI7O0FBRUEsSUFBSUcsWUFBWUgsUUFBUSxvQkFBUixDQUFoQjs7QUFNQSxJQUFNSSx1QkFBdUIsOENBQTdCOztJQUVNQyxvQjs7Ozs7OztzQ0FDcUJDLEksRUFBY0MsSyxFQUFlQyxNLEVBQWdCO0FBQ3BFLFVBQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQ1o7QUFDRDtBQUNELFVBQUlDLGtCQUFrQkosSUFBbEIsTUFBNEJLLFNBQWhDLEVBQTJDO0FBQ3pDLFlBQUlDLFdBQVcsTUFBTU4sSUFBTixHQUFhLGtDQUE1QjtBQUNBLFlBQUlPLFdBQVcsMEJBQ2JDLEtBQUtDLFNBQUwsQ0FBZUMsT0FBT0MsSUFBUCxDQUFZUCxpQkFBWixFQUErQlEsSUFBL0IsRUFBZixFQUFzRCxJQUF0RCxFQUE0RCxJQUE1RCxDQURGO0FBRUFDLG1CQUFXUCxRQUFYLEVBQXFCTCxLQUFyQixFQUE0QkMsTUFBNUIsRUFBb0NLLFFBQXBDO0FBQ0Q7QUFDRCxVQUFJTyxRQUFRVixrQkFBa0JKLElBQWxCLEVBQ1ZDLEtBRFUsRUFFVkQsSUFGVSxFQUdWRSxNQUhVLEVBSVYsTUFKVSxFQUtWLElBTFUsRUFNVkosb0JBTlUsQ0FBWjtBQVFBLFVBQUlnQixLQUFKLEVBQVc7QUFDVEQsbUJBQVdDLE1BQU1DLE9BQWpCLEVBQTBCZCxLQUExQixFQUFpQ0MsTUFBakM7QUFDRDtBQUNGOzs7a0NBRW9CYyxJLEVBQWNDLE0sRUFBZ0I7QUFDakQsVUFBSSxDQUFDZCxPQUFMLEVBQWM7QUFDWjtBQUNEO0FBQ0QsV0FBSyxJQUFJSCxJQUFULElBQWlCaUIsT0FBT0QsSUFBUCxDQUFqQixFQUErQjtBQUM3QmpCLDZCQUFxQm1CLGlCQUFyQixDQUF1Q2xCLElBQXZDLEVBQTZDaUIsT0FBT0QsSUFBUCxDQUE3QyxFQUEyRCxnQkFBZ0JBLElBQTNFO0FBQ0Q7QUFDRjs7OzJDQUU2QkcsYyxFQUFnQjtBQUM1QyxXQUFLLElBQUlDLEdBQVQsSUFBZ0JELGNBQWhCLEVBQWdDO0FBQzlCZiwwQkFBa0JnQixHQUFsQixJQUF5QkQsZUFBZUMsR0FBZixDQUF6QjtBQUNEO0FBQ0Y7Ozs7OztBQUdILElBQUlQLGFBQWEsU0FBYkEsVUFBYSxDQUFTUCxRQUFULEVBQW1CTCxLQUFuQixFQUEwQkMsTUFBMUIsRUFBbUNLLFFBQW5DLEVBQThDO0FBQzdEVixZQUNFLEtBREYsRUFFRVMsV0FBVyxJQUFYLElBQW1CSixVQUFVLGFBQTdCLElBQThDLElBQTlDLEdBQ0FNLEtBQUtDLFNBQUwsQ0FBZVIsS0FBZixFQUFzQixJQUF0QixFQUE0QixJQUE1QixDQURBLElBQ3FDTSxZQUFZLEVBRGpELENBRkY7QUFLRCxDQU5EOztBQVFBLElBQUlILG9CQUFvQixFQUF4Qjs7QUFFQUwscUJBQXFCc0Isc0JBQXJCLENBQTRDNUIsbUJBQTVDO0FBQ0FNLHFCQUFxQnNCLHNCQUFyQixDQUE0QzFCLGtCQUE1QztBQUNBSSxxQkFBcUJzQixzQkFBckIsQ0FBNEN6QixrQkFBNUM7O0FBRUEwQixPQUFPQyxPQUFQLEdBQWlCeEIsb0JBQWpCIiwiZmlsZSI6IlN0eWxlU2hlZXRWYWxpZGF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU3R5bGVTaGVldFZhbGlkYXRpb25cbiAqIEBmbG93XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIEltYWdlU3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCdJbWFnZVN0eWxlUHJvcFR5cGVzJyk7XG52YXIgVGV4dFN0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnVGV4dFN0eWxlUHJvcFR5cGVzJyk7XG52YXIgVmlld1N0eWxlUHJvcFR5cGVzID0gcmVxdWlyZSgnVmlld1N0eWxlUHJvcFR5cGVzJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLy8gSGFyZGNvZGVkIGJlY2F1c2UgdGhpcyBpcyBhIGxlZ2l0IGNhc2UgYnV0IHdlIGRvbid0IHdhbnQgdG8gbG9hZCBpdCBmcm9tXG4vLyBhIHByaXZhdGUgQVBJLiBXZSBtaWdodCBsaWtlbHkgd2FudCB0byB1bmlmeSBzdHlsZSBzaGVldCBjcmVhdGlvbiB3aXRoIGhvdyBpdFxuLy8gaXMgZG9uZSBpbiB0aGUgRE9NIHNvIHRoaXMgbWlnaHQgbW92ZSBpbnRvIFJlYWN0LiBJIGtub3cgd2hhdCBJJ20gZG9pbmcgc29cbi8vIHBseiBkb24ndCBmaXJlIG1lLlxuY29uc3QgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5jbGFzcyBTdHlsZVNoZWV0VmFsaWRhdGlvbiB7XG4gIHN0YXRpYyB2YWxpZGF0ZVN0eWxlUHJvcChwcm9wOiBzdHJpbmcsIHN0eWxlOiBPYmplY3QsIGNhbGxlcjogc3RyaW5nKSB7XG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhbGxTdHlsZVByb3BUeXBlc1twcm9wXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbWVzc2FnZTEgPSAnXCInICsgcHJvcCArICdcIiBpcyBub3QgYSB2YWxpZCBzdHlsZSBwcm9wZXJ0eS4nO1xuICAgICAgdmFyIG1lc3NhZ2UyID0gJ1xcblZhbGlkIHN0eWxlIHByb3BzOiAnICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoYWxsU3R5bGVQcm9wVHlwZXMpLnNvcnQoKSwgbnVsbCwgJyAgJyk7XG4gICAgICBzdHlsZUVycm9yKG1lc3NhZ2UxLCBzdHlsZSwgY2FsbGVyLCBtZXNzYWdlMik7XG4gICAgfVxuICAgIHZhciBlcnJvciA9IGFsbFN0eWxlUHJvcFR5cGVzW3Byb3BdKFxuICAgICAgc3R5bGUsXG4gICAgICBwcm9wLFxuICAgICAgY2FsbGVyLFxuICAgICAgJ3Byb3AnLFxuICAgICAgbnVsbCxcbiAgICAgIFJlYWN0UHJvcFR5cGVzU2VjcmV0LFxuICAgICk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBzdHlsZUVycm9yKGVycm9yLm1lc3NhZ2UsIHN0eWxlLCBjYWxsZXIpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyB2YWxpZGF0ZVN0eWxlKG5hbWU6IHN0cmluZywgc3R5bGVzOiBPYmplY3QpIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZXNbbmFtZV0pIHtcbiAgICAgIFN0eWxlU2hlZXRWYWxpZGF0aW9uLnZhbGlkYXRlU3R5bGVQcm9wKHByb3AsIHN0eWxlc1tuYW1lXSwgJ1N0eWxlU2hlZXQgJyArIG5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhZGRWYWxpZFN0eWxlUHJvcFR5cGVzKHN0eWxlUHJvcFR5cGVzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHN0eWxlUHJvcFR5cGVzKSB7XG4gICAgICBhbGxTdHlsZVByb3BUeXBlc1trZXldID0gc3R5bGVQcm9wVHlwZXNba2V5XTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlRXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlMSwgc3R5bGUsIGNhbGxlcj8sIG1lc3NhZ2UyPykge1xuICBpbnZhcmlhbnQoXG4gICAgZmFsc2UsXG4gICAgbWVzc2FnZTEgKyAnXFxuJyArIChjYWxsZXIgfHwgJzw8dW5rbm93bj4+JykgKyAnOiAnICtcbiAgICBKU09OLnN0cmluZ2lmeShzdHlsZSwgbnVsbCwgJyAgJykgKyAobWVzc2FnZTIgfHwgJycpXG4gICk7XG59O1xuXG52YXIgYWxsU3R5bGVQcm9wVHlwZXMgPSB7fTtcblxuU3R5bGVTaGVldFZhbGlkYXRpb24uYWRkVmFsaWRTdHlsZVByb3BUeXBlcyhJbWFnZVN0eWxlUHJvcFR5cGVzKTtcblN0eWxlU2hlZXRWYWxpZGF0aW9uLmFkZFZhbGlkU3R5bGVQcm9wVHlwZXMoVGV4dFN0eWxlUHJvcFR5cGVzKTtcblN0eWxlU2hlZXRWYWxpZGF0aW9uLmFkZFZhbGlkU3R5bGVQcm9wVHlwZXMoVmlld1N0eWxlUHJvcFR5cGVzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTdHlsZVNoZWV0VmFsaWRhdGlvbjtcbiJdfQ==