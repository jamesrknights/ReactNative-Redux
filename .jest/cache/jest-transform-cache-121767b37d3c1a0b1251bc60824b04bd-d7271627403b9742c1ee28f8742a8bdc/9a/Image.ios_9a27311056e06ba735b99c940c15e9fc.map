{"version":3,"sources":["Image.ios.js"],"names":["EdgeInsetsPropType","require","ImageResizeMode","ImageSourcePropType","ImageStylePropTypes","NativeMethodsMixin","NativeModules","React","PropTypes","ReactNativeViewAttributes","StyleSheet","StyleSheetPropType","createReactClass","flattenStyle","requireNativeComponent","resolveAssetSource","ImageViewManager","Image","displayName","propTypes","style","source","defaultSource","oneOfType","shape","uri","string","width","number","height","scale","accessible","bool","accessibilityLabel","node","blurRadius","capInsets","resizeMethod","oneOf","resizeMode","testID","onLayout","func","onLoadStart","onProgress","onError","onPartialLoad","onLoad","onLoadEnd","statics","getSize","success","failure","console","warn","prefetch","url","prefetchImage","mixins","viewConfig","uiViewClassName","validAttributes","UIView","render","props","undefined","sources","Array","isArray","styles","base","tintColor","src","children","Error","create","overflow","RCTImageView","module","exports"],"mappings":"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","file":"Image.ios.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule Image\n * @flow\n * @format\n */\n'use strict';\n\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst ImageResizeMode = require('ImageResizeMode');\nconst ImageSourcePropType = require('ImageSourcePropType');\nconst ImageStylePropTypes = require('ImageStylePropTypes');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst NativeModules = require('NativeModules');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst StyleSheet = require('StyleSheet');\nconst StyleSheetPropType = require('StyleSheetPropType');\n\nconst createReactClass = require('create-react-class');\nconst flattenStyle = require('flattenStyle');\nconst requireNativeComponent = require('requireNativeComponent');\nconst resolveAssetSource = require('resolveAssetSource');\n\nconst ImageViewManager = NativeModules.ImageViewManager;\n\n/**\n * A React component for displaying different types of images,\n * including network images, static resources, temporary local images, and\n * images from local disk, such as the camera roll.\n *\n * See https://facebook.github.io/react-native/docs/image.html\n */\nconst Image = createReactClass({\n  displayName: 'Image',\n  propTypes: {\n    /**\n     * See https://facebook.github.io/react-native/docs/image.html#style\n     */\n    style: StyleSheetPropType(ImageStylePropTypes),\n    /**\n     * The image source (either a remote URL or a local file resource).\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#source\n     */\n    source: ImageSourcePropType,\n    /**\n     * A static image to display while loading the image source.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#defaultsource\n     */\n    defaultSource: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        scale: PropTypes.number,\n      }),\n      PropTypes.number,\n    ]),\n    /**\n     * When true, indicates the image is an accessibility element.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#accessible\n     */\n    accessible: PropTypes.bool,\n    /**\n     * The text that's read by the screen reader when the user interacts with\n     * the image.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#accessibilitylabel\n     */\n    accessibilityLabel: PropTypes.node,\n    /**\n     * blurRadius: the blur radius of the blur filter added to the image\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#blurradius\n     */\n    blurRadius: PropTypes.number,\n    /**\n     * See https://facebook.github.io/react-native/docs/image.html#capinsets\n     */\n    capInsets: EdgeInsetsPropType,\n    /**\n     * See https://facebook.github.io/react-native/docs/image.html#resizemethod\n     */\n    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),\n    /**\n     * Determines how to resize the image when the frame doesn't match the raw\n     * image dimensions.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#resizemode\n     */\n    resizeMode: PropTypes.oneOf([\n      'cover',\n      'contain',\n      'stretch',\n      'repeat',\n      'center',\n    ]),\n    /**\n     * A unique identifier for this element to be used in UI Automation\n     * testing scripts.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#testid\n     */\n    testID: PropTypes.string,\n    /**\n     * Invoked on mount and layout changes with\n     * `{nativeEvent: {layout: {x, y, width, height}}}`.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onlayout\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on load start.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onloadstart\n     */\n    onLoadStart: PropTypes.func,\n    /**\n     * Invoked on download progress with `{nativeEvent: {loaded, total}}`.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onprogress\n     */\n    onProgress: PropTypes.func,\n    /**\n     * Invoked on load error with `{nativeEvent: {error}}`.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onerror\n     */\n    onError: PropTypes.func,\n    /**\n     * Invoked when a partial load of the image is complete.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onpartialload\n     */\n    onPartialLoad: PropTypes.func,\n    /**\n     * Invoked when load completes successfully.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onload\n     */\n    onLoad: PropTypes.func,\n    /**\n     * Invoked when load either succeeds or fails.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#onloadend\n     */\n    onLoadEnd: PropTypes.func,\n  },\n\n  statics: {\n    resizeMode: ImageResizeMode,\n    /**\n     * Retrieve the width and height (in pixels) of an image prior to displaying it.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#getsize\n     */\n    getSize: function(\n      uri: string,\n      success: (width: number, height: number) => void,\n      failure?: (error: any) => void,\n    ) {\n      ImageViewManager.getSize(\n        uri,\n        success,\n        failure ||\n          function() {\n            console.warn('Failed to get size for image: ' + uri);\n          },\n      );\n    },\n    /**\n     * Prefetches a remote image for later use by downloading it to the disk\n     * cache.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#prefetch\n     */\n    prefetch(url: string) {\n      return ImageViewManager.prefetchImage(url);\n    },\n    /**\n     * Resolves an asset reference into an object.\n     *\n     * See https://facebook.github.io/react-native/docs/image.html#resolveassetsource\n     */\n    resolveAssetSource: resolveAssetSource,\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  viewConfig: {\n    uiViewClassName: 'UIView',\n    validAttributes: ReactNativeViewAttributes.UIView,\n  },\n\n  render: function() {\n    const source = resolveAssetSource(this.props.source) || {\n      uri: undefined,\n      width: undefined,\n      height: undefined,\n    };\n\n    let sources;\n    let style;\n    if (Array.isArray(source)) {\n      style = flattenStyle([styles.base, this.props.style]) || {};\n      sources = source;\n    } else {\n      const {width, height, uri} = source;\n      style =\n        flattenStyle([{width, height}, styles.base, this.props.style]) || {};\n      sources = [source];\n\n      if (uri === '') {\n        console.warn('source.uri should not be an empty string');\n      }\n    }\n\n    const resizeMode =\n      this.props.resizeMode || (style || {}).resizeMode || 'cover'; // Workaround for flow bug t7737108\n    const tintColor = (style || {}).tintColor; // Workaround for flow bug t7737108\n\n    if (this.props.src) {\n      console.warn(\n        'The <Image> component requires a `source` property rather than `src`.',\n      );\n    }\n\n    if (this.props.children) {\n      throw new Error(\n        'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.',\n      );\n    }\n\n    return (\n      <RCTImageView\n        {...this.props}\n        style={style}\n        resizeMode={resizeMode}\n        tintColor={tintColor}\n        source={sources}\n      />\n    );\n  },\n});\n\nconst styles = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n});\n\nconst RCTImageView = requireNativeComponent('RCTImageView', Image);\n\nmodule.exports = Image;\n"]}