99fa8d73bd0fbbbfcc322ea1541c64e5

'use strict';

var NativeModules = require('NativeModules');

var invariant = require('fbjs/lib/invariant');

var FrameRateLogger = {
  setGlobalOptions: function setGlobalOptions(options) {
    if (options.debug !== undefined) {
      invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
    }
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
  },

  setContext: function setContext(context) {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
  },

  beginScroll: function beginScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
  },
  endScroll: function endScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
  }
};

module.exports = FrameRateLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZyYW1lUmF0ZUxvZ2dlci5qcyJdLCJuYW1lcyI6WyJOYXRpdmVNb2R1bGVzIiwicmVxdWlyZSIsImludmFyaWFudCIsIkZyYW1lUmF0ZUxvZ2dlciIsInNldEdsb2JhbE9wdGlvbnMiLCJvcHRpb25zIiwiZGVidWciLCJ1bmRlZmluZWQiLCJzZXRDb250ZXh0IiwiY29udGV4dCIsImJlZ2luU2Nyb2xsIiwiZW5kU2Nyb2xsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtBQVNBOztBQUVBLElBQU1BLGdCQUFnQkMsUUFBUSxlQUFSLENBQXRCOztBQUVBLElBQU1DLFlBQVlELFFBQVEsb0JBQVIsQ0FBbEI7O0FBa0JBLElBQU1FLGtCQUFrQjtBQUt0QkMsb0JBQWtCLDBCQUFTQyxPQUFULEVBQWtFO0FBQ2xGLFFBQUlBLFFBQVFDLEtBQVIsS0FBa0JDLFNBQXRCLEVBQWlDO0FBQy9CTCxnQkFDRUYsY0FBY0csZUFEaEIsRUFFRSw0REFGRjtBQUlEO0FBQ0RILGtCQUFjRyxlQUFkLElBQWlDSCxjQUFjRyxlQUFkLENBQThCQyxnQkFBOUIsQ0FBK0NDLE9BQS9DLENBQWpDO0FBQ0QsR0FicUI7O0FBbUJ0QkcsY0FBWSxvQkFBU0MsT0FBVCxFQUEwQjtBQUNwQ1Qsa0JBQWNHLGVBQWQsSUFBaUNILGNBQWNHLGVBQWQsQ0FBOEJLLFVBQTlCLENBQXlDQyxPQUF6QyxDQUFqQztBQUNELEdBckJxQjs7QUEyQnRCQyxhQTNCc0IseUJBMkJSO0FBQ1pWLGtCQUFjRyxlQUFkLElBQWlDSCxjQUFjRyxlQUFkLENBQThCTyxXQUE5QixFQUFqQztBQUNELEdBN0JxQjtBQW1DdEJDLFdBbkNzQix1QkFtQ1Y7QUFDVlgsa0JBQWNHLGVBQWQsSUFBaUNILGNBQWNHLGVBQWQsQ0FBOEJRLFNBQTlCLEVBQWpDO0FBQ0Q7QUFyQ3FCLENBQXhCOztBQXdDQUMsT0FBT0MsT0FBUCxHQUFpQlYsZUFBakIiLCJmaWxlIjoiRnJhbWVSYXRlTG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRnJhbWVSYXRlTG9nZ2VyXG4gKiBAZmxvd1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5hdGl2ZU1vZHVsZXMgPSByZXF1aXJlKCdOYXRpdmVNb2R1bGVzJyk7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEZsb3cgQVBJIGZvciBuYXRpdmUgRnJhbWVSYXRlTG9nZ2VyIG1vZHVsZS4gSWYgdGhlIG5hdGl2ZSBtb2R1bGUgaXMgbm90IGluc3RhbGxlZCwgZnVuY3Rpb24gY2FsbHNcbiAqIGFyZSBqdXN0IG5vLW9wcy5cbiAqXG4gKiBUeXBpY2FsIGJlaGF2aW9yIGlzIHRoYXQgYHNldENvbnRleHRgIGlzIGNhbGxlZCB3aGVuIGEgbmV3IHNjcmVlbiBpcyBsb2FkZWQgKGUuZy4gdmlhIGFcbiAqIG5hdmlnYXRpb24gaW50ZWdyYXRpb24pLCBhbmQgdGhlbiBgYmVnaW5TY3JvbGxgIGlzIGNhbGxlZCBieSBgU2Nyb2xsUmVzcG9uZGVyYCBhdCB3aGljaCBwb2ludCB0aGVcbiAqIG5hdGl2ZSBtb2R1bGUgdGhlbiBiZWdpbnMgdHJhY2tpbmcgZnJhbWUgZHJvcHMuIFdoZW4gYFNjcm9sbFJlc3BvbmRlcmAgY2FsbHMgYGVuZFNjcm9sbGAsIHRoZVxuICogbmF0aXZlIG1vZHVsZSBnYXRoZXJzIHVwIGFsbCBpdCdzIGZyYW1lIGRyb3AgZGF0YSBhbmQgcmVwb3J0cyBpdCB2aWEgYW4gYW5hbHl0aWNzIHBpcGVsaW5lIGZvclxuICogYW5hbHlzaXMuXG4gKlxuICogTm90ZSB0aGF0IGBiZWdpblNjcm9sbGAgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBieSBgU2Nyb2xsUmVzcG9uZGVyYCAtIHVuY2xlYXIgaWYgdGhhdCdzIGFcbiAqIGJ1ZywgYnV0IHRoZSBuYXRpdmUgbW9kdWxlIHNob3VsZCBiZSByb2J1c3QgdG8gdGhhdC5cbiAqXG4gKiBJbiB0aGUgZnV0dXJlIHdlIG1heSBhZGQgc3VwcG9ydCBmb3IgdHJhY2tpbmcgZnJhbWUgZHJvcHMgaW4gb3RoZXIgdHlwZXMgb2YgaW50ZXJhY3Rpb25zIGJleW9uZFxuICogc2Nyb2xsaW5nLlxuICovXG5jb25zdCBGcmFtZVJhdGVMb2dnZXIgPSB7XG4gIC8qKlxuICAgKiBFbmFibGUgYGRlYnVnYCB0byBzZWUgbG9jYWwgbG9ncyBvZiB3aGF0J3MgZ29pbmcgb24uIGByZXBvcnRTdGFja1RyYWNlc2Agd2lsbCBncmFiIHN0YWNrIHRyYWNlc1xuICAgKiBkdXJpbmcgVUkgdGhyZWFkIHN0YWxscyBhbmQgdXBsb2FkIHRoZW0gaWYgdGhlIG5hdGl2ZSBtb2R1bGUgc3VwcG9ydHMgaXQuXG4gICAqL1xuICBzZXRHbG9iYWxPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zOiB7ZGVidWc/OiBib29sZWFuLCByZXBvcnRTdGFja1RyYWNlcz86IGJvb2xlYW59KSB7XG4gICAgaWYgKG9wdGlvbnMuZGVidWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlcixcbiAgICAgICAgJ1RyeWluZyB0byBkZWJ1ZyBGcmFtZVJhdGVMb2dnZXIgd2l0aG91dCB0aGUgbmF0aXZlIG1vZHVsZSEnLFxuICAgICAgKTtcbiAgICB9XG4gICAgTmF0aXZlTW9kdWxlcy5GcmFtZVJhdGVMb2dnZXIgJiYgTmF0aXZlTW9kdWxlcy5GcmFtZVJhdGVMb2dnZXIuc2V0R2xvYmFsT3B0aW9ucyhvcHRpb25zKTtcbiAgfSxcblxuICAvKipcbiAgICogTXVzdCBjYWxsIGBzZXRDb250ZXh0YCBiZWZvcmUgYW55IGV2ZW50cyBjYW4gYmUgcHJvcGVybHkgdHJhY2tlZCwgd2hpY2ggaXMgZG9uZSBhdXRvbWF0aWNhbGx5XG4gICAqIGluIGBBcHBSZWdpc3RyeWAsIGJ1dCBuYXZpZ2F0aW9uIGlzIGFsc28gYSBjb21tb24gcGxhY2UgdG8gaG9vayBpbi5cbiAgICovXG4gIHNldENvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQ6IHN0cmluZykge1xuICAgIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyICYmIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyLnNldENvbnRleHQoY29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGxlZCBpbiBgU2Nyb2xsUmVzcG9uZGVyYCBzbyBhbnkgY29tcG9uZW50IHRoYXQgdXNlcyB0aGF0IG1vZHVsZSB3aWxsIGhhbmRsZSB0aGlzXG4gICAqIGF1dG9tYXRpY2FsbHkuXG4gICAqL1xuICBiZWdpblNjcm9sbCgpIHtcbiAgICBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlciAmJiBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlci5iZWdpblNjcm9sbCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgaW4gYFNjcm9sbFJlc3BvbmRlcmAgc28gYW55IGNvbXBvbmVudCB0aGF0IHVzZXMgdGhhdCBtb2R1bGUgd2lsbCBoYW5kbGUgdGhpc1xuICAgKiBhdXRvbWF0aWNhbGx5LlxuICAgKi9cbiAgZW5kU2Nyb2xsKCkge1xuICAgIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyICYmIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyLmVuZFNjcm9sbCgpO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGcmFtZVJhdGVMb2dnZXI7XG4iXX0=