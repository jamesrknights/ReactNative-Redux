fc5903c2196f84dd78d50317e9580bbb

'use strict';

var AssetRegistry = require('AssetRegistry');
var AssetSourceResolver = require('AssetSourceResolver');

var _customSourceTransformer = void 0,
    _serverURL = void 0,
    _scriptURL = void 0;
var _sourceCodeScriptURL = void 0;

function getDevServerURL() {
  if (_serverURL === undefined) {
    var match = _sourceCodeScriptURL && _sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }
  return _serverURL;
}

function _coerceLocalScriptURL(scriptURL) {
  if (scriptURL) {
    if (scriptURL.startsWith('assets://')) {
      return null;
    }
    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
    if (!scriptURL.includes('://')) {
      scriptURL = 'file://' + scriptURL;
    }
  }
  return scriptURL;
}

function getScriptURL() {
  if (_scriptURL === undefined) {
    _scriptURL = _coerceLocalScriptURL(_sourceCodeScriptURL);
  }
  return _scriptURL;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);
  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }
  return resolver.defaultAsset();
}

var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;
if (!sourceCode) {
  var NativeModules = require('NativeModules');
  sourceCode = NativeModules && NativeModules.SourceCode;
}
_sourceCodeScriptURL = sourceCode && sourceCode.scriptURL;

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc29sdmVBc3NldFNvdXJjZS5qcyJdLCJuYW1lcyI6WyJBc3NldFJlZ2lzdHJ5IiwicmVxdWlyZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJfc2VydmVyVVJMIiwiX3NjcmlwdFVSTCIsIl9zb3VyY2VDb2RlU2NyaXB0VVJMIiwiZ2V0RGV2U2VydmVyVVJMIiwidW5kZWZpbmVkIiwibWF0Y2giLCJfY29lcmNlTG9jYWxTY3JpcHRVUkwiLCJzY3JpcHRVUkwiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJpbmNsdWRlcyIsImdldFNjcmlwdFVSTCIsInNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZXIiLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJzb3VyY2UiLCJhc3NldCIsImdldEFzc2V0QnlJRCIsInJlc29sdmVyIiwiZGVmYXVsdEFzc2V0Iiwic291cmNlQ29kZSIsImdsb2JhbCIsIm5hdGl2ZUV4dGVuc2lvbnMiLCJTb3VyY2VDb2RlIiwiTmF0aXZlTW9kdWxlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJwaWNrU2NhbGUiXSwibWFwcGluZ3MiOiI7QUFXQTs7QUFFQSxJQUFNQSxnQkFBZ0JDLFFBQVEsZUFBUixDQUF0QjtBQUNBLElBQU1DLHNCQUFzQkQsUUFBUSxxQkFBUixDQUE1Qjs7QUFJQSxJQUFJRSxpQ0FBSjtBQUFBLElBQThCQyxtQkFBOUI7QUFBQSxJQUEwQ0MsbUJBQTFDO0FBQ0EsSUFBSUMsNkJBQUo7O0FBRUEsU0FBU0MsZUFBVCxHQUFvQztBQUNsQyxNQUFJSCxlQUFlSSxTQUFuQixFQUE4QjtBQUM1QixRQUFNQyxRQUFRSCx3QkFBd0JBLHFCQUFxQkcsS0FBckIsQ0FBMkIsbUJBQTNCLENBQXRDO0FBQ0EsUUFBSUEsS0FBSixFQUFXO0FBRVRMLG1CQUFhSyxNQUFNLENBQU4sQ0FBYjtBQUNELEtBSEQsTUFHTztBQUVMTCxtQkFBYSxJQUFiO0FBQ0Q7QUFDRjtBQUNELFNBQU9BLFVBQVA7QUFDRDs7QUFFRCxTQUFTTSxxQkFBVCxDQUErQkMsU0FBL0IsRUFBNEQ7QUFDMUQsTUFBSUEsU0FBSixFQUFlO0FBQ2IsUUFBSUEsVUFBVUMsVUFBVixDQUFxQixXQUFyQixDQUFKLEVBQXVDO0FBRXJDLGFBQU8sSUFBUDtBQUNEO0FBQ0RELGdCQUFZQSxVQUFVRSxTQUFWLENBQW9CLENBQXBCLEVBQXVCRixVQUFVRyxXQUFWLENBQXNCLEdBQXRCLElBQTZCLENBQXBELENBQVo7QUFDQSxRQUFJLENBQUNILFVBQVVJLFFBQVYsQ0FBbUIsS0FBbkIsQ0FBTCxFQUFnQztBQUc5Qkosa0JBQVksWUFBWUEsU0FBeEI7QUFDRDtBQUNGO0FBQ0QsU0FBT0EsU0FBUDtBQUNEOztBQUVELFNBQVNLLFlBQVQsR0FBaUM7QUFDL0IsTUFBSVgsZUFBZUcsU0FBbkIsRUFBOEI7QUFDNUJILGlCQUFhSyxzQkFBc0JKLG9CQUF0QixDQUFiO0FBQ0Q7QUFDRCxTQUFPRCxVQUFQO0FBQ0Q7O0FBRUQsU0FBU1ksMEJBQVQsQ0FDRUMsV0FERixFQUVRO0FBQ05mLDZCQUEyQmUsV0FBM0I7QUFDRDs7QUFNRCxTQUFTQyxrQkFBVCxDQUE0QkMsTUFBNUIsRUFBK0Q7QUFDN0QsTUFBSSxPQUFPQSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCLFdBQU9BLE1BQVA7QUFDRDs7QUFFRCxNQUFJQyxRQUFRckIsY0FBY3NCLFlBQWQsQ0FBMkJGLE1BQTNCLENBQVo7QUFDQSxNQUFJLENBQUNDLEtBQUwsRUFBWTtBQUNWLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQU1FLFdBQVcsSUFBSXJCLG1CQUFKLENBQ2ZLLGlCQURlLEVBRWZTLGNBRmUsRUFHZkssS0FIZSxDQUFqQjtBQUtBLE1BQUlsQix3QkFBSixFQUE4QjtBQUM1QixXQUFPQSx5QkFBeUJvQixRQUF6QixDQUFQO0FBQ0Q7QUFDRCxTQUFPQSxTQUFTQyxZQUFULEVBQVA7QUFDRDs7QUFFRCxJQUFJQyxhQUFhQyxPQUFPQyxnQkFBUCxJQUEyQkQsT0FBT0MsZ0JBQVAsQ0FBd0JDLFVBQXBFO0FBQ0EsSUFBSSxDQUFDSCxVQUFMLEVBQWlCO0FBQ2YsTUFBTUksZ0JBQWdCNUIsUUFBUSxlQUFSLENBQXRCO0FBQ0F3QixlQUFhSSxpQkFBaUJBLGNBQWNELFVBQTVDO0FBQ0Q7QUFDRHRCLHVCQUF1Qm1CLGNBQWNBLFdBQVdkLFNBQWhEOztBQUVBbUIsT0FBT0MsT0FBUCxHQUFpQlosa0JBQWpCO0FBQ0FXLE9BQU9DLE9BQVAsQ0FBZUMsU0FBZixHQUEyQjlCLG9CQUFvQjhCLFNBQS9DO0FBQ0FGLE9BQU9DLE9BQVAsQ0FBZWQsMEJBQWYsR0FBNENBLDBCQUE1QyIsImZpbGUiOiJyZXNvbHZlQXNzZXRTb3VyY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSByZXNvbHZlQXNzZXRTb3VyY2VcbiAqIEBmbG93XG4gKlxuICogUmVzb2x2ZXMgYW4gYXNzZXQgaW50byBhIGBzb3VyY2VgIGZvciBgSW1hZ2VgLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzc2V0UmVnaXN0cnkgPSByZXF1aXJlKCdBc3NldFJlZ2lzdHJ5Jyk7XG5jb25zdCBBc3NldFNvdXJjZVJlc29sdmVyID0gcmVxdWlyZSgnQXNzZXRTb3VyY2VSZXNvbHZlcicpO1xuXG5pbXBvcnQgdHlwZSB7IFJlc29sdmVkQXNzZXRTb3VyY2UgfSBmcm9tICdBc3NldFNvdXJjZVJlc29sdmVyJztcblxubGV0IF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciwgX3NlcnZlclVSTCwgX3NjcmlwdFVSTDtcbmxldCBfc291cmNlQ29kZVNjcmlwdFVSTDogP3N0cmluZztcblxuZnVuY3Rpb24gZ2V0RGV2U2VydmVyVVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NlcnZlclVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBfc291cmNlQ29kZVNjcmlwdFVSTCAmJiBfc291cmNlQ29kZVNjcmlwdFVSTC5tYXRjaCgvXmh0dHBzPzpcXC9cXC8uKj9cXC8vKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIC8vIGpzQnVuZGxlIHdhcyBsb2FkZWQgZnJvbSBuZXR3b3JrXG4gICAgICBfc2VydmVyVVJMID0gbWF0Y2hbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGpzQnVuZGxlIHdhcyBsb2FkZWQgZnJvbSBmaWxlXG4gICAgICBfc2VydmVyVVJMID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9zZXJ2ZXJVUkw7XG59XG5cbmZ1bmN0aW9uIF9jb2VyY2VMb2NhbFNjcmlwdFVSTChzY3JpcHRVUkw6ID9zdHJpbmcpOiA/c3RyaW5nIHtcbiAgaWYgKHNjcmlwdFVSTCkge1xuICAgIGlmIChzY3JpcHRVUkwuc3RhcnRzV2l0aCgnYXNzZXRzOi8vJykpIHtcbiAgICAgIC8vIGFuZHJvaWQ6IHJ1bm5pbmcgZnJvbSB3aXRoaW4gYXNzZXRzLCBubyBvZmZsaW5lIHBhdGggdG8gdXNlXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2NyaXB0VVJMID0gc2NyaXB0VVJMLnN1YnN0cmluZygwLCBzY3JpcHRVUkwubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgIGlmICghc2NyaXB0VVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgLy8gQWRkIGZpbGUgcHJvdG9jb2wgaW4gY2FzZSB3ZSBoYXZlIGFuIGFic29sdXRlIGZpbGUgcGF0aCBhbmQgbm90IGEgVVJMLlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgcmVhbGx5IGJlIG5lY2Vzc2FyeS4gc2NyaXB0VVJMIHNob3VsZCBiZSBhIFVSTC5cbiAgICAgIHNjcmlwdFVSTCA9ICdmaWxlOi8vJyArIHNjcmlwdFVSTDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gZ2V0U2NyaXB0VVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NjcmlwdFVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgX3NjcmlwdFVSTCA9IF9jb2VyY2VMb2NhbFNjcmlwdFVSTChfc291cmNlQ29kZVNjcmlwdFVSTCk7XG4gIH1cbiAgcmV0dXJuIF9zY3JpcHRVUkw7XG59XG5cbmZ1bmN0aW9uIHNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyKFxuICB0cmFuc2Zvcm1lcjogKHJlc29sdmVyOiBBc3NldFNvdXJjZVJlc29sdmVyKSA9PiBSZXNvbHZlZEFzc2V0U291cmNlLFxuKTogdm9pZCB7XG4gIF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xufVxuXG4vKipcbiAqIGBzb3VyY2VgIGlzIGVpdGhlciBhIG51bWJlciAob3BhcXVlIHR5cGUgcmV0dXJuZWQgYnkgcmVxdWlyZSgnLi9mb28ucG5nJykpXG4gKiBvciBhbiBgSW1hZ2VTb3VyY2VgIGxpa2UgeyB1cmk6ICc8aHR0cCBsb2NhdGlvbiB8fCBmaWxlIHBhdGg+JyB9XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldFNvdXJjZShzb3VyY2U6IGFueSk6ID9SZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHZhciBhc3NldCA9IEFzc2V0UmVnaXN0cnkuZ2V0QXNzZXRCeUlEKHNvdXJjZSk7XG4gIGlmICghYXNzZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHJlc29sdmVyID0gbmV3IEFzc2V0U291cmNlUmVzb2x2ZXIoXG4gICAgZ2V0RGV2U2VydmVyVVJMKCksXG4gICAgZ2V0U2NyaXB0VVJMKCksXG4gICAgYXNzZXQsXG4gICk7XG4gIGlmIChfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIpIHtcbiAgICByZXR1cm4gX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyKHJlc29sdmVyKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZXIuZGVmYXVsdEFzc2V0KCk7XG59XG5cbmxldCBzb3VyY2VDb2RlID0gZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMgJiYgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMuU291cmNlQ29kZTtcbmlmICghc291cmNlQ29kZSkge1xuICBjb25zdCBOYXRpdmVNb2R1bGVzID0gcmVxdWlyZSgnTmF0aXZlTW9kdWxlcycpO1xuICBzb3VyY2VDb2RlID0gTmF0aXZlTW9kdWxlcyAmJiBOYXRpdmVNb2R1bGVzLlNvdXJjZUNvZGU7XG59XG5fc291cmNlQ29kZVNjcmlwdFVSTCA9IHNvdXJjZUNvZGUgJiYgc291cmNlQ29kZS5zY3JpcHRVUkw7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzb2x2ZUFzc2V0U291cmNlO1xubW9kdWxlLmV4cG9ydHMucGlja1NjYWxlID0gQXNzZXRTb3VyY2VSZXNvbHZlci5waWNrU2NhbGU7XG5tb2R1bGUuZXhwb3J0cy5zZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciA9IHNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyO1xuIl19