{"version":3,"sources":["resolveAssetSource.js"],"names":["AssetRegistry","require","AssetSourceResolver","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getDevServerURL","undefined","match","_coerceLocalScriptURL","scriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","getAssetByID","resolver","defaultAsset","sourceCode","global","nativeExtensions","SourceCode","NativeModules","module","exports","pickScale"],"mappings":";AAWA;;AAEA,IAAMA,gBAAgBC,QAAQ,eAAR,CAAtB;AACA,IAAMC,sBAAsBD,QAAQ,qBAAR,CAA5B;;AAIA,IAAIE,iCAAJ;AAAA,IAA8BC,mBAA9B;AAAA,IAA0CC,mBAA1C;AACA,IAAIC,6BAAJ;;AAEA,SAASC,eAAT,GAAoC;AAClC,MAAIH,eAAeI,SAAnB,EAA8B;AAC5B,QAAMC,QAAQH,wBAAwBA,qBAAqBG,KAArB,CAA2B,mBAA3B,CAAtC;AACA,QAAIA,KAAJ,EAAW;AAETL,mBAAaK,MAAM,CAAN,CAAb;AACD,KAHD,MAGO;AAELL,mBAAa,IAAb;AACD;AACF;AACD,SAAOA,UAAP;AACD;;AAED,SAASM,qBAAT,CAA+BC,SAA/B,EAA4D;AAC1D,MAAIA,SAAJ,EAAe;AACb,QAAIA,UAAUC,UAAV,CAAqB,WAArB,CAAJ,EAAuC;AAErC,aAAO,IAAP;AACD;AACDD,gBAAYA,UAAUE,SAAV,CAAoB,CAApB,EAAuBF,UAAUG,WAAV,CAAsB,GAAtB,IAA6B,CAApD,CAAZ;AACA,QAAI,CAACH,UAAUI,QAAV,CAAmB,KAAnB,CAAL,EAAgC;AAG9BJ,kBAAY,YAAYA,SAAxB;AACD;AACF;AACD,SAAOA,SAAP;AACD;;AAED,SAASK,YAAT,GAAiC;AAC/B,MAAIX,eAAeG,SAAnB,EAA8B;AAC5BH,iBAAaK,sBAAsBJ,oBAAtB,CAAb;AACD;AACD,SAAOD,UAAP;AACD;;AAED,SAASY,0BAAT,CACEC,WADF,EAEQ;AACNf,6BAA2Be,WAA3B;AACD;;AAMD,SAASC,kBAAT,CAA4BC,MAA5B,EAA+D;AAC7D,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOA,MAAP;AACD;;AAED,MAAIC,QAAQrB,cAAcsB,YAAd,CAA2BF,MAA3B,CAAZ;AACA,MAAI,CAACC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAME,WAAW,IAAIrB,mBAAJ,CACfK,iBADe,EAEfS,cAFe,EAGfK,KAHe,CAAjB;AAKA,MAAIlB,wBAAJ,EAA8B;AAC5B,WAAOA,yBAAyBoB,QAAzB,CAAP;AACD;AACD,SAAOA,SAASC,YAAT,EAAP;AACD;;AAED,IAAIC,aAAaC,OAAOC,gBAAP,IAA2BD,OAAOC,gBAAP,CAAwBC,UAApE;AACA,IAAI,CAACH,UAAL,EAAiB;AACf,MAAMI,gBAAgB5B,QAAQ,eAAR,CAAtB;AACAwB,eAAaI,iBAAiBA,cAAcD,UAA5C;AACD;AACDtB,uBAAuBmB,cAAcA,WAAWd,SAAhD;;AAEAmB,OAAOC,OAAP,GAAiBZ,kBAAjB;AACAW,OAAOC,OAAP,CAAeC,SAAf,GAA2B9B,oBAAoB8B,SAA/C;AACAF,OAAOC,OAAP,CAAed,0BAAf,GAA4CA,0BAA5C","file":"resolveAssetSource.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule resolveAssetSource\n * @flow\n *\n * Resolves an asset into a `source` for `Image`.\n */\n'use strict';\n\nconst AssetRegistry = require('AssetRegistry');\nconst AssetSourceResolver = require('AssetSourceResolver');\n\nimport type { ResolvedAssetSource } from 'AssetSourceResolver';\n\nlet _customSourceTransformer, _serverURL, _scriptURL;\nlet _sourceCodeScriptURL: ?string;\n\nfunction getDevServerURL(): ?string {\n  if (_serverURL === undefined) {\n    const match = _sourceCodeScriptURL && _sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: ?string): ?string {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return scriptURL;\n}\n\nfunction getScriptURL(): ?string {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(_sourceCodeScriptURL);\n  }\n  return _scriptURL;\n}\n\nfunction setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource,\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: any): ?ResolvedAssetSource {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    getDevServerURL(),\n    getScriptURL(),\n    asset,\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nlet sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;\nif (!sourceCode) {\n  const NativeModules = require('NativeModules');\n  sourceCode = NativeModules && NativeModules.SourceCode;\n}\n_sourceCodeScriptURL = sourceCode && sourceCode.scriptURL;\n\nmodule.exports = resolveAssetSource;\nmodule.exports.pickScale = AssetSourceResolver.pickScale;\nmodule.exports.setCustomSourceTransformer = setCustomSourceTransformer;\n"]}