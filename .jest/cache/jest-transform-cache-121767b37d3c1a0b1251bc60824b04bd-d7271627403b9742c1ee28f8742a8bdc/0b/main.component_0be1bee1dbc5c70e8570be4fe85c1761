238c191c640b5706de146bb667f00357
"use strict";
/**
 *
 * James Knights 2018
 * React Native (TypeScript) Boiler Plate template
 *
 * Use this template as a guide to building components.
 * The goal is to create components that all share the same
 * lifecycle and functionalty.
 *
 * Where possible, use/create Common Components if the component is/will:
 * - Be used more than once
 * - Repeats code
 * - Is a useful feature, which could be inherited by other modules
 *
 * The outline for the app architecture can be found here:
 * https://docs.google.com/drawings/d/1UpMKRfAzVRM410zhgziZoxuqSkLVk39MLt0Dd775vb4/edit?usp=sharing
 *
 */

var __extends = this && this.__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * 1. Imports
 */

/* React Native */

var react_1 = __importDefault(require("react"));

var react_native_1 = require("react-native");

var main_config_1 = require("./main.config");
/** Redux */


var react_redux_1 = require("react-redux");

var location_service_1 = require("../../modules/location/service/location.service");
/* Services/Config */


var helper_1 = require("../../modules/util/helper");
/* Other Components */

/* Third Party Modules */

/**
 * 2. Class Declarations
 */

/** All Component classes extend from React Component, which accepts two Type parameters, State and Props */


var MainComponent =
/** @class */
function (_super) {
  __extends(MainComponent, _super);
  /** Always called, calls super (React.Component) */


  function MainComponent(props) {
    var _this = _super.call(this, props) || this;

    _this.props = props;
    _this.state = {
      /*Local State here*/
      locationLoading: false,
      isRunning: false
    };
    /* Services */

    _this.locationService = new location_service_1.LocationService(null);
    return _this;
    /* Always use the helper util class */

    /* State */
  }

  MainComponent.prototype.isRunning = function () {
    return this.state.isRunning;
  };
  /**
   * Each Service has been given the component that called it as a handler
   * This essentially means, that whenever a service makes a call, the data
   * that comes back hits the 'hande_update' within the component that initalised
   * the service.
   *
          * Params:
              * data of type any
              * action of type string
   *
          * Returns:
              * void
   *
   * Each service has a 'service name', for example the location service name is
   * 'location_service'. This is set in the service's configuration.
   *
   * Service names can be retrieved by calling:
   * service.get_service_name() => returns string
   *
   * Below is an example update handle by the location service
   */


  MainComponent.prototype.handle_update = function (data, action) {};
  /**
   * componentDidMount is part of React's LifeCycle - this is called
   * when the component has mounted.
   *
   * This function is useful for service calls on app ready etc
   *
          * Params:
              * None
   *
          * Returns:
              * void
   *
   */


  MainComponent.prototype.componentDidMount = function () {};
  /**
   * setComponentState is an override of the React's setState
   * instead of calling setState, call components should call
   * setComponentState - this let's the data flow be controlled
   * and if any override measures need to happen before the
   * views are refreshed, the code can be put here.
   *
   * If you do not need to, then just use this method as is.
   *
          * Params :
              * state of type State
   *
          * Returns :
              * void
   *
   */


  MainComponent.prototype.setComponentState = function (state) {
    _super.prototype.setState.call(this, state);
  };
  /** Custom Component Methods */


  MainComponent.prototype.onLocationRequest = function () {
    this.setComponentState({
      locationLoading: true
    });
    this.locationService.getLocation();
  };

  MainComponent.prototype.parseLocation = function () {
    var result = this.props.location.currentLocation;

    if (!helper_1.Helper.isNull(result)) {
      result = helper_1.Helper.concatenate(" ", [result.get("latitude"), result.get("longitude")]);
    } else {
      result = "";
    }

    return result;
  };
  /**
   * render is part of the React LifeCycle, rendering UI
          * Params :
              * None
   *
          * Returns :
              * void
   */


  MainComponent.prototype.render = function () {
    var _this = this;

    return react_1.default.createElement(react_native_1.View, null, react_1.default.createElement(react_native_1.TouchableOpacity, {
      onPress: function () {
        return _this.props.changeInit();
      }
    }, react_1.default.createElement(react_native_1.Text, null, "Change init"), react_1.default.createElement(react_native_1.Text, null, this.props.init.toString())), react_1.default.createElement(react_native_1.TouchableOpacity, {
      onPress: function () {
        return _this.onLocationRequest();
      }
    }, react_1.default.createElement(react_native_1.Text, null, "Location : ", this.state.locationLoading.toString()), react_1.default.createElement(react_native_1.Text, null, "Get Location"), react_1.default.createElement(react_native_1.Text, null, "Current Location : ", this.parseLocation())));
  };

  return MainComponent;
}(react_1.default.Component);

exports.MainComponent = MainComponent;
/** Redux Function */

var mapDispatchToProps = function (dispatch) {
  return main_config_1.MainActions;
};

var mapStateToProps = function (state) {
  return main_config_1.MainStateToProps;
};

exports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(MainComponent); //# sourceMappingURL=main.component.js.map
//# sourceMappingURL=data:application/json;charset=utf-8;base64,