{"version":3,"sources":["main.component.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * \r\n * James Knights 2018\r\n * React Native (TypeScript) Boiler Plate template\r\n * \r\n * Use this template as a guide to building components.\r\n * The goal is to create components that all share the same \r\n * lifecycle and functionalty.\r\n * \r\n * Where possible, use/create Common Components if the component is/will:\r\n * - Be used more than once\r\n * - Repeats code \r\n * - Is a useful feature, which could be inherited by other modules\r\n * \r\n * The outline for the app architecture can be found here:\r\n * https://docs.google.com/drawings/d/1UpMKRfAzVRM410zhgziZoxuqSkLVk39MLt0Dd775vb4/edit?usp=sharing\r\n * \r\n */\r\n\r\n/**\r\n * 1. Imports\r\n */\r\n\r\n/* React Native */\r\nimport React from 'react';\r\nimport { View, TouchableOpacity, Text, ActivityIndicator } from 'react-native';\r\n\r\n/* Common */\r\nimport { CommonComponent } from '@common/component/common.component';\r\nimport { State } from '@common/component/common.state';\r\nimport { Props } from '@common/component/common.props';\r\nimport { MainActions, MainStateToProps } from './main.config';\r\n\r\n/** Redux */\r\nimport { connect } from 'react-redux';\r\nimport { LocationService } from '../../modules/location/service/location.service';\r\n\r\n/* Services/Config */\r\nimport { Helper } from '../../modules/util/helper';\r\n\r\n/* Other Components */\r\n\r\n/* Third Party Modules */\r\n\r\n/**\r\n * 2. Class Declarations \r\n */\r\n\r\n/** All Component classes extend from React Component, which accepts two Type parameters, State and Props */\r\n\r\nexport class MainComponent extends React.Component<State, Props> implements CommonComponent {\r\n\r\n    /* \r\n        Minimum variable declartion, props and state\r\n            - Props: Static properties and data passed between components\r\n            - State: Fluid data (non static values), such as values which update after a certain time/event\r\n    */\r\n\r\n    props: any;\r\n    state : any;\r\n\r\n    /** Example Service Implementation */\r\n    private locationService : LocationService;\r\n\r\n    /** Always called, calls super (React.Component) */\r\n\r\n    constructor (props: any) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            /*Local State here*/\r\n            locationLoading : false,\r\n            isRunning : false\r\n        }\r\n        \r\n        /* Services */\r\n        this.locationService = new LocationService(null);\r\n\r\n        /* Always use the helper util class */\r\n\r\n        /* State */\r\n        \r\n    }\r\n\r\n    public isRunning () : boolean {\r\n        return this.state.isRunning;\r\n    }\r\n\r\n    /** \r\n     * Each Service has been given the component that called it as a handler\r\n     * This essentially means, that whenever a service makes a call, the data\r\n     * that comes back hits the 'hande_update' within the component that initalised \r\n     * the service. \r\n     * \r\n            * Params:\r\n                * data of type any\r\n                * action of type string\r\n     * \r\n            * Returns:\r\n                * void\r\n     * \r\n     * Each service has a 'service name', for example the location service name is \r\n     * 'location_service'. This is set in the service's configuration. \r\n     * \r\n     * Service names can be retrieved by calling: \r\n     * service.get_service_name() => returns string\r\n     * \r\n     * Below is an example update handle by the location service\r\n     */\r\n\r\n    public handle_update(data: any, action: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * componentDidMount is part of React's LifeCycle - this is called\r\n     * when the component has mounted. \r\n     * \r\n     * This function is useful for service calls on app ready etc\r\n     * \r\n            * Params:\r\n                * None\r\n     * \r\n            * Returns:\r\n                * void\r\n     * \r\n     */\r\n    public componentDidMount() {\r\n    }\r\n\r\n    /**\r\n     * setComponentState is an override of the React's setState\r\n     * instead of calling setState, call components should call\r\n     * setComponentState - this let's the data flow be controlled\r\n     * and if any override measures need to happen before the\r\n     * views are refreshed, the code can be put here.\r\n     * \r\n     * If you do not need to, then just use this method as is.\r\n     * \r\n            * Params : \r\n                * state of type State\r\n     * \r\n            * Returns : \r\n                * void\r\n     * \r\n     */\r\n    public setComponentState(state: any) {\r\n        super.setState(state);\r\n    }\r\n\r\n    /** Custom Component Methods */\r\n    private onLocationRequest () {\r\n        this.setComponentState({locationLoading : true});\r\n        this.locationService.getLocation();\r\n    }\r\n\r\n    private parseLocation () {\r\n        let result = this.props.location.currentLocation;\r\n        if (!Helper.isNull(result)) {\r\n            result = Helper.concatenate(\" \", [result.get(\"latitude\"), result.get(\"longitude\")]);\r\n        } else {\r\n            result = \"\";\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * render is part of the React LifeCycle, rendering UI\r\n            * Params : \r\n                * None\r\n     * \r\n            * Returns : \r\n                * void\r\n     */\r\n\r\n    public render() {\r\n        return (\r\n            <View>\r\n                <TouchableOpacity onPress={() => this.props.changeInit()}>\r\n                    <Text>Change init</Text>\r\n                    <Text>{this.props.init.toString()}</Text> \r\n                </TouchableOpacity>\r\n                <TouchableOpacity onPress={() => this.onLocationRequest()}>\r\n                    <Text>Location : {this.state.locationLoading.toString()}</Text>\r\n                    <Text>Get Location</Text>  \r\n                    <Text>Current Location : {this.parseLocation()}</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n/** Redux Function */\r\n\r\nconst mapDispatchToProps = function (dispatch: any) {\r\n    return MainActions\r\n}\r\n\r\nconst mapStateToProps = (state : any) => (\r\n    MainStateToProps\r\n)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent);"],"sourceRoot":""}