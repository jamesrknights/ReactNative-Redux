3dd524633cc0ee412129a94d9ef19f4b


var _inGuard = 0;

var _globalHandler = function onError(e) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }
    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }
    return null;
  },
  inGuard: function inGuard() {
    return _inGuard;
  },
  guard: function guard(fun, name, context) {
    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }
    name = name || fun.name || '<generated guard>';
    function guarded() {
      return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
    }

    return guarded;
  }
};

global.ErrorUtils = ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLWd1YXJkLmpzIl0sIm5hbWVzIjpbIl9pbkd1YXJkIiwiX2dsb2JhbEhhbmRsZXIiLCJvbkVycm9yIiwiZSIsIkVycm9yVXRpbHMiLCJzZXRHbG9iYWxIYW5kbGVyIiwiZnVuIiwiZ2V0R2xvYmFsSGFuZGxlciIsInJlcG9ydEVycm9yIiwiZXJyb3IiLCJyZXBvcnRGYXRhbEVycm9yIiwiYXBwbHlXaXRoR3VhcmQiLCJjb250ZXh0IiwiYXJncyIsImFwcGx5IiwiYXBwbHlXaXRoR3VhcmRJZk5lZWRlZCIsImluR3VhcmQiLCJndWFyZCIsIm5hbWUiLCJjb25zb2xlIiwid2FybiIsImd1YXJkZWQiLCJhcmd1bWVudHMiLCJnbG9iYWwiXSwibWFwcGluZ3MiOiI7O0FBV0EsSUFBSUEsV0FBVyxDQUFmOztBQU9BLElBQUlDLGlCQUFpQixTQUFTQyxPQUFULENBQWlCQyxDQUFqQixFQUFvQjtBQUN2QyxRQUFNQSxDQUFOO0FBQ0QsQ0FGRDs7QUFZQSxJQUFNQyxhQUFhO0FBQ2pCQyxrQkFEaUIsNEJBQ0FDLEdBREEsRUFDSztBQUNwQkwscUJBQWlCSyxHQUFqQjtBQUNELEdBSGdCO0FBSWpCQyxrQkFKaUIsOEJBSUU7QUFDakIsV0FBT04sY0FBUDtBQUNELEdBTmdCO0FBT2pCTyxhQVBpQix1QkFPTEMsS0FQSyxFQU9FO0FBQ2pCUixzQkFBa0JBLGVBQWVRLEtBQWYsQ0FBbEI7QUFDRCxHQVRnQjtBQVVqQkMsa0JBVmlCLDRCQVVBRCxLQVZBLEVBVU87QUFDdEJSLHNCQUFrQkEsZUFBZVEsS0FBZixFQUFzQixJQUF0QixDQUFsQjtBQUNELEdBWmdCO0FBYWpCRSxnQkFiaUIsMEJBYUZMLEdBYkUsRUFhR00sT0FiSCxFQWFZQyxJQWJaLEVBYWtCO0FBQ2pDLFFBQUk7QUFDRmI7QUFDQSxhQUFPTSxJQUFJUSxLQUFKLENBQVVGLE9BQVYsRUFBbUJDLElBQW5CLENBQVA7QUFDRCxLQUhELENBR0UsT0FBT1YsQ0FBUCxFQUFVO0FBQ1ZDLGlCQUFXSSxXQUFYLENBQXVCTCxDQUF2QjtBQUNELEtBTEQsU0FLVTtBQUNSSDtBQUNEO0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0F2QmdCO0FBd0JqQmUsd0JBeEJpQixrQ0F3Qk1ULEdBeEJOLEVBd0JXTSxPQXhCWCxFQXdCb0JDLElBeEJwQixFQXdCMEI7QUFDekMsUUFBSVQsV0FBV1ksT0FBWCxFQUFKLEVBQTBCO0FBQ3hCLGFBQU9WLElBQUlRLEtBQUosQ0FBVUYsT0FBVixFQUFtQkMsSUFBbkIsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMVCxpQkFBV08sY0FBWCxDQUEwQkwsR0FBMUIsRUFBK0JNLE9BQS9CLEVBQXdDQyxJQUF4QztBQUNEO0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0EvQmdCO0FBZ0NqQkcsU0FoQ2lCLHFCQWdDUDtBQUNSLFdBQU9oQixRQUFQO0FBQ0QsR0FsQ2dCO0FBbUNqQmlCLE9BbkNpQixpQkFtQ1hYLEdBbkNXLEVBbUNOWSxJQW5DTSxFQW1DQU4sT0FuQ0EsRUFtQ1M7QUFDeEIsUUFBSSxPQUFPTixHQUFQLEtBQWUsVUFBbkIsRUFBK0I7QUFDN0JhLGNBQVFDLElBQVIsQ0FBYSxxREFBYixFQUFvRWQsR0FBcEU7QUFDQSxhQUFPLElBQVA7QUFDRDtBQUNEWSxXQUFPQSxRQUFRWixJQUFJWSxJQUFaLElBQW9CLG1CQUEzQjtBQUNBLGFBQVNHLE9BQVQsR0FBbUI7QUFDakIsYUFDRWpCLFdBQVdPLGNBQVgsQ0FDRUwsR0FERixFQUVFTSxXQUFXLElBRmIsRUFHRVUsU0FIRixFQUlFLElBSkYsRUFLRUosSUFMRixDQURGO0FBU0Q7O0FBRUQsV0FBT0csT0FBUDtBQUNEO0FBdERnQixDQUFuQjs7QUF5REFFLE9BQU9uQixVQUFQLEdBQW9CQSxVQUFwQiIsImZpbGUiOiJlcnJvci1ndWFyZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGVycm9yLWd1YXJkXG4gKiBAcG9seWZpbGxcbiAqIEBub2xpbnRcbiAqL1xuXG5sZXQgX2luR3VhcmQgPSAwO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGVycm9yIGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiB3ZSBlbmNvdW50ZXIgYW4gZXhjZXB0aW9uXG4gKiB3aGVuIGxvYWRpbmcgYSBtb2R1bGUuIFRoaXMgd2lsbCByZXBvcnQgYW55IGVycm9ycyBlbmNvdW50ZXJlZCBiZWZvcmVcbiAqIEV4Y2VwdGlvbnNNYW5hZ2VyIGlzIGNvbmZpZ3VyZWQuXG4gKi9cbmxldCBfZ2xvYmFsSGFuZGxlciA9IGZ1bmN0aW9uIG9uRXJyb3IoZSkge1xuICB0aHJvdyBlO1xufTtcblxuLyoqXG4gKiBUaGUgcGFydGljdWxhciByZXF1aXJlIHJ1bnRpbWUgdGhhdCB3ZSBhcmUgdXNpbmcgbG9va3MgZm9yIGEgZ2xvYmFsXG4gKiBgRXJyb3JVdGlsc2Agb2JqZWN0IGFuZCBpZiBpdCBleGlzdHMsIHRoZW4gaXQgcmVxdWlyZXMgbW9kdWxlcyB3aXRoIHRoZVxuICogZXJyb3IgaGFuZGxlciBzcGVjaWZpZWQgdmlhIEVycm9yVXRpbHMuc2V0R2xvYmFsSGFuZGxlciBieSBjYWxsaW5nIHRoZVxuICogcmVxdWlyZSBmdW5jdGlvbiB3aXRoIGFwcGx5V2l0aEd1YXJkLiBTaW5jZSB0aGUgcmVxdWlyZSBtb2R1bGUgaXMgbG9hZGVkXG4gKiBiZWZvcmUgYW55IG9mIHRoZSBtb2R1bGVzLCB0aGlzIEVycm9yVXRpbHMgbXVzdCBiZSBkZWZpbmVkIChhbmQgdGhlIGhhbmRsZXJcbiAqIHNldCkgZ2xvYmFsbHkgYmVmb3JlIHJlcXVpcmluZyBhbnl0aGluZy5cbiAqL1xuY29uc3QgRXJyb3JVdGlscyA9IHtcbiAgc2V0R2xvYmFsSGFuZGxlcihmdW4pIHtcbiAgICBfZ2xvYmFsSGFuZGxlciA9IGZ1bjtcbiAgfSxcbiAgZ2V0R2xvYmFsSGFuZGxlcigpIHtcbiAgICByZXR1cm4gX2dsb2JhbEhhbmRsZXI7XG4gIH0sXG4gIHJlcG9ydEVycm9yKGVycm9yKSB7XG4gICAgX2dsb2JhbEhhbmRsZXIgJiYgX2dsb2JhbEhhbmRsZXIoZXJyb3IpO1xuICB9LFxuICByZXBvcnRGYXRhbEVycm9yKGVycm9yKSB7XG4gICAgX2dsb2JhbEhhbmRsZXIgJiYgX2dsb2JhbEhhbmRsZXIoZXJyb3IsIHRydWUpO1xuICB9LFxuICBhcHBseVdpdGhHdWFyZChmdW4sIGNvbnRleHQsIGFyZ3MpIHtcbiAgICB0cnkge1xuICAgICAgX2luR3VhcmQrKztcbiAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgRXJyb3JVdGlscy5yZXBvcnRFcnJvcihlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2luR3VhcmQtLTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGFwcGx5V2l0aEd1YXJkSWZOZWVkZWQoZnVuLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKEVycm9yVXRpbHMuaW5HdWFyZCgpKSB7XG4gICAgICByZXR1cm4gZnVuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBFcnJvclV0aWxzLmFwcGx5V2l0aEd1YXJkKGZ1biwgY29udGV4dCwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBpbkd1YXJkKCkge1xuICAgIHJldHVybiBfaW5HdWFyZDtcbiAgfSxcbiAgZ3VhcmQoZnVuLCBuYW1lLCBjb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBmdW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybignQSBmdW5jdGlvbiBtdXN0IGJlIHBhc3NlZCB0byBFcnJvclV0aWxzLmd1YXJkLCBnb3QgJywgZnVuKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBuYW1lID0gbmFtZSB8fCBmdW4ubmFtZSB8fCAnPGdlbmVyYXRlZCBndWFyZD4nO1xuICAgIGZ1bmN0aW9uIGd1YXJkZWQoKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBFcnJvclV0aWxzLmFwcGx5V2l0aEd1YXJkKFxuICAgICAgICAgIGZ1bixcbiAgICAgICAgICBjb250ZXh0IHx8IHRoaXMsXG4gICAgICAgICAgYXJndW1lbnRzLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbmFtZVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBndWFyZGVkO1xuICB9LFxufTtcblxuZ2xvYmFsLkVycm9yVXRpbHMgPSBFcnJvclV0aWxzO1xuIl19