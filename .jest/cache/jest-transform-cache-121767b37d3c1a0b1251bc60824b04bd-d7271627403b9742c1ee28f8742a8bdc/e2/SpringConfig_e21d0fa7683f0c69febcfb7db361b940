a2822f85e32989ee388edf83f14176f3


'use strict';

function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction)
  };
}

function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);

  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}

module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNwcmluZ0NvbmZpZy5qcyJdLCJuYW1lcyI6WyJzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlIiwib1ZhbHVlIiwiZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUiLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInRlbnNpb24iLCJmcmljdGlvbiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJmcm9tQm91bmNpbmVzc0FuZFNwZWVkIiwiYm91bmNpbmVzcyIsInNwZWVkIiwibm9ybWFsaXplIiwidmFsdWUiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJwcm9qZWN0Tm9ybWFsIiwibiIsInN0YXJ0IiwiZW5kIiwibGluZWFySW50ZXJwb2xhdGlvbiIsInQiLCJxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uIiwiYjNGcmljdGlvbjEiLCJ4IiwiTWF0aCIsInBvdyIsImIzRnJpY3Rpb24yIiwiYjNGcmljdGlvbjMiLCJiM05vYm91bmNlIiwiYiIsInMiLCJib3VuY3lUZW5zaW9uIiwiYm91bmN5RnJpY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQVVBOztBQU9BLFNBQVNBLHlCQUFULENBQW1DQyxNQUFuQyxFQUEyQztBQUN6QyxTQUFPLENBQUNBLFNBQVMsRUFBVixJQUFnQixJQUFoQixHQUF1QixHQUE5QjtBQUNEOztBQUVELFNBQVNDLHVCQUFULENBQWlDRCxNQUFqQyxFQUF5QztBQUN2QyxTQUFPLENBQUNBLFNBQVMsQ0FBVixJQUFlLENBQWYsR0FBbUIsRUFBMUI7QUFDRDs7QUFFRCxTQUFTRSw2QkFBVCxDQUNFQyxPQURGLEVBRUVDLFFBRkYsRUFHb0I7QUFDbEIsU0FBTztBQUNMQyxlQUFXTiwwQkFBMEJJLE9BQTFCLENBRE47QUFFTEcsYUFBU0wsd0JBQXdCRyxRQUF4QjtBQUZKLEdBQVA7QUFJRDs7QUFFRCxTQUFTRyxzQkFBVCxDQUNFQyxVQURGLEVBRUVDLEtBRkYsRUFHb0I7QUFDbEIsV0FBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLFVBQTFCLEVBQXNDQyxRQUF0QyxFQUFnRDtBQUM5QyxXQUFPLENBQUNGLFFBQVFDLFVBQVQsS0FBd0JDLFdBQVdELFVBQW5DLENBQVA7QUFDRDs7QUFFRCxXQUFTRSxhQUFULENBQXVCQyxDQUF2QixFQUEwQkMsS0FBMUIsRUFBaUNDLEdBQWpDLEVBQXNDO0FBQ3BDLFdBQU9ELFFBQVNELEtBQUtFLE1BQU1ELEtBQVgsQ0FBaEI7QUFDRDs7QUFFRCxXQUFTRSxtQkFBVCxDQUE2QkMsQ0FBN0IsRUFBZ0NILEtBQWhDLEVBQXVDQyxHQUF2QyxFQUE0QztBQUMxQyxXQUFPRSxJQUFJRixHQUFKLEdBQVUsQ0FBQyxJQUFJRSxDQUFMLElBQVVILEtBQTNCO0FBQ0Q7O0FBRUQsV0FBU0kseUJBQVQsQ0FBbUNELENBQW5DLEVBQXNDSCxLQUF0QyxFQUE2Q0MsR0FBN0MsRUFBa0Q7QUFDaEQsV0FBT0Msb0JBQW9CLElBQUlDLENBQUosR0FBUUEsSUFBSUEsQ0FBaEMsRUFBbUNILEtBQW5DLEVBQTBDQyxHQUExQyxDQUFQO0FBQ0Q7O0FBRUQsV0FBU0ksV0FBVCxDQUFxQkMsQ0FBckIsRUFBd0I7QUFDdEIsV0FBUSxTQUFTQyxLQUFLQyxHQUFMLENBQVNGLENBQVQsRUFBWSxDQUFaLENBQVYsR0FDSixRQUFRQyxLQUFLQyxHQUFMLENBQVNGLENBQVQsRUFBWSxDQUFaLENBREosR0FDc0IsT0FBT0EsQ0FEN0IsR0FDaUMsSUFEeEM7QUFFRDs7QUFFRCxXQUFTRyxXQUFULENBQXFCSCxDQUFyQixFQUF3QjtBQUN0QixXQUFRLFdBQVdDLEtBQUtDLEdBQUwsQ0FBU0YsQ0FBVCxFQUFZLENBQVosQ0FBWixHQUNKLFFBQVFDLEtBQUtDLEdBQUwsQ0FBU0YsQ0FBVCxFQUFZLENBQVosQ0FESixHQUNzQixPQUFPQSxDQUQ3QixHQUNpQyxDQUR4QztBQUVEOztBQUVELFdBQVNJLFdBQVQsQ0FBcUJKLENBQXJCLEVBQXdCO0FBQ3RCLFdBQVEsYUFBYUMsS0FBS0MsR0FBTCxDQUFTRixDQUFULEVBQVksQ0FBWixDQUFkLEdBQ0osV0FBV0MsS0FBS0MsR0FBTCxDQUFTRixDQUFULEVBQVksQ0FBWixDQURQLEdBQ3lCLFNBQVNBLENBRGxDLEdBQ3NDLElBRDdDO0FBRUQ7O0FBRUQsV0FBU0ssVUFBVCxDQUFvQnhCLE9BQXBCLEVBQTZCO0FBQzNCLFFBQUlBLFdBQVcsRUFBZixFQUFtQjtBQUNqQixhQUFPa0IsWUFBWWxCLE9BQVosQ0FBUDtBQUNELEtBRkQsTUFFTyxJQUFJQSxVQUFVLEVBQVYsSUFBZ0JBLFdBQVcsRUFBL0IsRUFBbUM7QUFDeEMsYUFBT3NCLFlBQVl0QixPQUFaLENBQVA7QUFDRCxLQUZNLE1BRUE7QUFDTCxhQUFPdUIsWUFBWXZCLE9BQVosQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsTUFBSXlCLElBQUlsQixVQUFVRixhQUFhLEdBQXZCLEVBQTRCLENBQTVCLEVBQStCLEVBQS9CLENBQVI7QUFDQW9CLE1BQUlkLGNBQWNjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsR0FBcEIsQ0FBSjtBQUNBLE1BQUlDLElBQUluQixVQUFVRCxRQUFRLEdBQWxCLEVBQXVCLENBQXZCLEVBQTBCLEVBQTFCLENBQVI7QUFDQSxNQUFJcUIsZ0JBQWdCaEIsY0FBY2UsQ0FBZCxFQUFpQixHQUFqQixFQUFzQixHQUF0QixDQUFwQjtBQUNBLE1BQUlFLGlCQUFpQlgsMEJBQ25CUSxDQURtQixFQUVuQkQsV0FBV0csYUFBWCxDQUZtQixFQUduQixJQUhtQixDQUFyQjs7QUFNQSxTQUFPO0FBQ0x6QixlQUFXTiwwQkFBMEIrQixhQUExQixDQUROO0FBRUx4QixhQUFTTCx3QkFBd0I4QixjQUF4QjtBQUZKLEdBQVA7QUFJRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmL0IsOERBRGU7QUFFZks7QUFGZSxDQUFqQiIsImZpbGUiOiJTcHJpbmdDb25maWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBTcHJpbmdDb25maWdcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG50eXBlIFNwcmluZ0NvbmZpZ1R5cGUgPSB7XG4gIHN0aWZmbmVzczogbnVtYmVyLFxuICBkYW1waW5nOiBudW1iZXIsXG59O1xuXG5mdW5jdGlvbiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDMwKSAqIDMuNjIgKyAxOTQ7XG59XG5cbmZ1bmN0aW9uIGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDgpICogMyArIDI1O1xufVxuXG5mdW5jdGlvbiBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbihcbiAgdGVuc2lvbjogbnVtYmVyLFxuICBmcmljdGlvbjogbnVtYmVyLFxuKTogU3ByaW5nQ29uZmlnVHlwZSB7XG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKHRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGZyaWN0aW9uKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbUJvdW5jaW5lc3NBbmRTcGVlZChcbiAgYm91bmNpbmVzczogbnVtYmVyLFxuICBzcGVlZDogbnVtYmVyLFxuKTogU3ByaW5nQ29uZmlnVHlwZSB7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIC0gc3RhcnRWYWx1ZSkgLyAoZW5kVmFsdWUgLSBzdGFydFZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2plY3ROb3JtYWwobiwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzdGFydCArIChuICogKGVuZCAtIHN0YXJ0KSk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lYXJJbnRlcnBvbGF0aW9uKHQsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gdCAqIGVuZCArICgxIC0gdCkgKiBzdGFydDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1YWRyYXRpY091dEludGVycG9sYXRpb24odCwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBsaW5lYXJJbnRlcnBvbGF0aW9uKDIgKiB0IC0gdCAqIHQsIHN0YXJ0LCBlbmQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYjNGcmljdGlvbjEoeCkge1xuICAgIHJldHVybiAoMC4wMDA3ICogTWF0aC5wb3coeCwgMykpIC1cbiAgICAgICgwLjAzMSAqIE1hdGgucG93KHgsIDIpKSArIDAuNjQgKiB4ICsgMS4yODtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24yKHgpIHtcbiAgICByZXR1cm4gKDAuMDAwMDQ0ICogTWF0aC5wb3coeCwgMykpIC1cbiAgICAgICgwLjAwNiAqIE1hdGgucG93KHgsIDIpKSArIDAuMzYgKiB4ICsgMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24zKHgpIHtcbiAgICByZXR1cm4gKDAuMDAwMDAwNDUgKiBNYXRoLnBvdyh4LCAzKSkgLVxuICAgICAgKDAuMDAwMzMyICogTWF0aC5wb3coeCwgMikpICsgMC4xMDc4ICogeCArIDUuODQ7XG4gIH1cblxuICBmdW5jdGlvbiBiM05vYm91bmNlKHRlbnNpb24pIHtcbiAgICBpZiAodGVuc2lvbiA8PSAxOCkge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24xKHRlbnNpb24pO1xuICAgIH0gZWxzZSBpZiAodGVuc2lvbiA+IDE4ICYmIHRlbnNpb24gPD0gNDQpIHtcbiAgICAgIHJldHVybiBiM0ZyaWN0aW9uMih0ZW5zaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24zKHRlbnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiID0gbm9ybWFsaXplKGJvdW5jaW5lc3MgLyAxLjcsIDAsIDIwKTtcbiAgYiA9IHByb2plY3ROb3JtYWwoYiwgMCwgMC44KTtcbiAgdmFyIHMgPSBub3JtYWxpemUoc3BlZWQgLyAxLjcsIDAsIDIwKTtcbiAgdmFyIGJvdW5jeVRlbnNpb24gPSBwcm9qZWN0Tm9ybWFsKHMsIDAuNSwgMjAwKTtcbiAgdmFyIGJvdW5jeUZyaWN0aW9uID0gcXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbihcbiAgICBiLFxuICAgIGIzTm9ib3VuY2UoYm91bmN5VGVuc2lvbiksXG4gICAgMC4wMVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeVRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeUZyaWN0aW9uKSxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21PcmlnYW1pVGVuc2lvbkFuZEZyaWN0aW9uLFxuICBmcm9tQm91bmNpbmVzc0FuZFNwZWVkLFxufTtcbiJdfQ==