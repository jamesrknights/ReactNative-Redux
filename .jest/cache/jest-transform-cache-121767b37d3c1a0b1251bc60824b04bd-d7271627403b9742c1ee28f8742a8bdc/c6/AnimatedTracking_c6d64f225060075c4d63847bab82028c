b624cbd4681cf277672033657ce8f1de

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnimatedValue = require('./AnimatedValue');
var AnimatedNode = require('./AnimatedNode');

var _require = require('../NativeAnimatedHelper'),
    generateNewAnimationId = _require.generateNewAnimationId,
    shouldUseNativeDriver = _require.shouldUseNativeDriver;

var AnimatedTracking = function (_AnimatedNode) {
  _inherits(AnimatedTracking, _AnimatedNode);

  function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
    _classCallCheck(this, AnimatedTracking);

    var _this = _possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

    _this._value = value;
    _this._parent = parent;
    _this._animationClass = animationClass;
    _this._animationConfig = animationConfig;
    _this._useNativeDriver = shouldUseNativeDriver(animationConfig);
    _this._callback = callback;
    _this.__attach();
    return _this;
  }

  _createClass(AnimatedTracking, [{
    key: '__makeNative',
    value: function __makeNative() {
      this.__isNative = true;
      this._parent.__makeNative();
      _get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), '__makeNative', this).call(this);
      this._value.__makeNative();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._parent.__getValue();
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
      if (this._useNativeDriver) {
        this.__makeNative();
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      _get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._value.animate(new this._animationClass(_extends({}, this._animationConfig, {
        toValue: this._animationConfig.toValue.__getValue()
      })), this._callback);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var animation = new this._animationClass(_extends({}, this._animationConfig, {
        toValue: undefined
      }));
      var animationConfig = animation.__getNativeAnimationConfig();
      return {
        type: 'tracking',
        animationId: generateNewAnimationId(),
        animationConfig: animationConfig,
        toValue: this._parent.__getNativeTag(),
        value: this._value.__getNativeTag()
      };
    }
  }]);

  return AnimatedTracking;
}(AnimatedNode);

module.exports = AnimatedTracking;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkVHJhY2tpbmcuanMiXSwibmFtZXMiOlsiQW5pbWF0ZWRWYWx1ZSIsInJlcXVpcmUiLCJBbmltYXRlZE5vZGUiLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic2hvdWxkVXNlTmF0aXZlRHJpdmVyIiwiQW5pbWF0ZWRUcmFja2luZyIsInZhbHVlIiwicGFyZW50IiwiYW5pbWF0aW9uQ2xhc3MiLCJhbmltYXRpb25Db25maWciLCJjYWxsYmFjayIsIl92YWx1ZSIsIl9wYXJlbnQiLCJfYW5pbWF0aW9uQ2xhc3MiLCJfYW5pbWF0aW9uQ29uZmlnIiwiX3VzZU5hdGl2ZURyaXZlciIsIl9jYWxsYmFjayIsIl9fYXR0YWNoIiwiX19pc05hdGl2ZSIsIl9fbWFrZU5hdGl2ZSIsIl9fZ2V0VmFsdWUiLCJfX2FkZENoaWxkIiwiX19yZW1vdmVDaGlsZCIsImFuaW1hdGUiLCJ0b1ZhbHVlIiwiYW5pbWF0aW9uIiwidW5kZWZpbmVkIiwiX19nZXROYXRpdmVBbmltYXRpb25Db25maWciLCJ0eXBlIiwiYW5pbWF0aW9uSWQiLCJfX2dldE5hdGl2ZVRhZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFVQTs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxnQkFBZ0JDLFFBQVEsaUJBQVIsQ0FBdEI7QUFDQSxJQUFNQyxlQUFlRCxRQUFRLGdCQUFSLENBQXJCOztlQUlJQSxRQUFRLHlCQUFSLEM7SUFGRkUsc0IsWUFBQUEsc0I7SUFDQUMscUIsWUFBQUEscUI7O0lBS0lDLGdCOzs7QUFRSiw0QkFDRUMsS0FERixFQUVFQyxNQUZGLEVBR0VDLGNBSEYsRUFJRUMsZUFKRixFQUtFQyxRQUxGLEVBTUU7QUFBQTs7QUFBQTs7QUFFQSxVQUFLQyxNQUFMLEdBQWNMLEtBQWQ7QUFDQSxVQUFLTSxPQUFMLEdBQWVMLE1BQWY7QUFDQSxVQUFLTSxlQUFMLEdBQXVCTCxjQUF2QjtBQUNBLFVBQUtNLGdCQUFMLEdBQXdCTCxlQUF4QjtBQUNBLFVBQUtNLGdCQUFMLEdBQXdCWCxzQkFBc0JLLGVBQXRCLENBQXhCO0FBQ0EsVUFBS08sU0FBTCxHQUFpQk4sUUFBakI7QUFDQSxVQUFLTyxRQUFMO0FBUkE7QUFTRDs7OzttQ0FFYztBQUNiLFdBQUtDLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxXQUFLTixPQUFMLENBQWFPLFlBQWI7QUFDQTtBQUNBLFdBQUtSLE1BQUwsQ0FBWVEsWUFBWjtBQUNEOzs7aUNBRW9CO0FBQ25CLGFBQU8sS0FBS1AsT0FBTCxDQUFhUSxVQUFiLEVBQVA7QUFDRDs7OytCQUVnQjtBQUNmLFdBQUtSLE9BQUwsQ0FBYVMsVUFBYixDQUF3QixJQUF4QjtBQUNBLFVBQUksS0FBS04sZ0JBQVQsRUFBMkI7QUFNekIsYUFBS0ksWUFBTDtBQUNEO0FBQ0Y7OzsrQkFFZ0I7QUFDZixXQUFLUCxPQUFMLENBQWFVLGFBQWIsQ0FBMkIsSUFBM0I7QUFDQTtBQUNEOzs7NkJBRWM7QUFDYixXQUFLWCxNQUFMLENBQVlZLE9BQVosQ0FDRSxJQUFJLEtBQUtWLGVBQVQsY0FDSyxLQUFLQyxnQkFEVjtBQUVFVSxpQkFBVSxLQUFLVixnQkFBTCxDQUFzQlUsT0FBdkIsQ0FBcUNKLFVBQXJDO0FBRlgsU0FERixFQUtFLEtBQUtKLFNBTFA7QUFPRDs7O3dDQUV3QjtBQUN2QixVQUFNUyxZQUFZLElBQUksS0FBS1osZUFBVCxjQUNiLEtBQUtDLGdCQURRO0FBR2hCVSxpQkFBU0U7QUFITyxTQUFsQjtBQUtBLFVBQU1qQixrQkFBa0JnQixVQUFVRSwwQkFBVixFQUF4QjtBQUNBLGFBQU87QUFDTEMsY0FBTSxVQUREO0FBRUxDLHFCQUFhMUIsd0JBRlI7QUFHTE0sd0NBSEs7QUFJTGUsaUJBQVMsS0FBS1osT0FBTCxDQUFha0IsY0FBYixFQUpKO0FBS0x4QixlQUFPLEtBQUtLLE1BQUwsQ0FBWW1CLGNBQVo7QUFMRixPQUFQO0FBT0Q7Ozs7RUE3RTRCNUIsWTs7QUFnRi9CNkIsT0FBT0MsT0FBUCxHQUFpQjNCLGdCQUFqQiIsImZpbGUiOiJBbmltYXRlZFRyYWNraW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgQW5pbWF0ZWRUcmFja2luZ1xuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBbmltYXRlZFZhbHVlID0gcmVxdWlyZSgnLi9BbmltYXRlZFZhbHVlJyk7XG5jb25zdCBBbmltYXRlZE5vZGUgPSByZXF1aXJlKCcuL0FuaW1hdGVkTm9kZScpO1xuY29uc3Qge1xuICBnZW5lcmF0ZU5ld0FuaW1hdGlvbklkLFxuICBzaG91bGRVc2VOYXRpdmVEcml2ZXIsXG59ID0gcmVxdWlyZSgnLi4vTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuaW1wb3J0IHR5cGUge0VuZENhbGxiYWNrfSBmcm9tICcuLi9hbmltYXRpb25zL0FuaW1hdGlvbic7XG5cbmNsYXNzIEFuaW1hdGVkVHJhY2tpbmcgZXh0ZW5kcyBBbmltYXRlZE5vZGUge1xuICBfdmFsdWU6IEFuaW1hdGVkVmFsdWU7XG4gIF9wYXJlbnQ6IEFuaW1hdGVkTm9kZTtcbiAgX2NhbGxiYWNrOiA/RW5kQ2FsbGJhY2s7XG4gIF9hbmltYXRpb25Db25maWc6IE9iamVjdDtcbiAgX2FuaW1hdGlvbkNsYXNzOiBhbnk7XG4gIF91c2VOYXRpdmVEcml2ZXI6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgdmFsdWU6IEFuaW1hdGVkVmFsdWUsXG4gICAgcGFyZW50OiBBbmltYXRlZE5vZGUsXG4gICAgYW5pbWF0aW9uQ2xhc3M6IGFueSxcbiAgICBhbmltYXRpb25Db25maWc6IE9iamVjdCxcbiAgICBjYWxsYmFjaz86ID9FbmRDYWxsYmFjayxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLl9hbmltYXRpb25DbGFzcyA9IGFuaW1hdGlvbkNsYXNzO1xuICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZyA9IGFuaW1hdGlvbkNvbmZpZztcbiAgICB0aGlzLl91c2VOYXRpdmVEcml2ZXIgPSBzaG91bGRVc2VOYXRpdmVEcml2ZXIoYW5pbWF0aW9uQ29uZmlnKTtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX19hdHRhY2goKTtcbiAgfVxuXG4gIF9fbWFrZU5hdGl2ZSgpIHtcbiAgICB0aGlzLl9faXNOYXRpdmUgPSB0cnVlO1xuICAgIHRoaXMuX3BhcmVudC5fX21ha2VOYXRpdmUoKTtcbiAgICBzdXBlci5fX21ha2VOYXRpdmUoKTtcbiAgICB0aGlzLl92YWx1ZS5fX21ha2VOYXRpdmUoKTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKTogT2JqZWN0IHtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50Ll9fZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIF9fYXR0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuX3BhcmVudC5fX2FkZENoaWxkKHRoaXMpO1xuICAgIGlmICh0aGlzLl91c2VOYXRpdmVEcml2ZXIpIHtcbiAgICAgIC8vIHdoZW4gdGhlIHRyYWNraW5nIHN0YXJ0cyB3ZSBuZWVkIHRvIGNvbnZlcnQgdGhpcyBub2RlIHRvIGEgXCJuYXRpdmUgbm9kZVwiXG4gICAgICAvLyBzbyB0aGF0IHRoZSBwYXJlbnQgbm9kZSB3aWxsIGJlIG1hZGUgXCJuYXRpdmVcIiB0b28uIFRoaXMgaXMgbmVjZXNzYXJ5IGFzXG4gICAgICAvLyBpZiB3ZSBkb24ndCBkbyB0aGlzIGB1cGRhdGVgIG1ldGhvZCB3aWxsIGdldCBjYWxsZWQuIEF0IHRoYXQgcG9pbnQgaXRcbiAgICAgIC8vIG1heSBiZSB0b28gbGF0ZSBhcyBpdCB3b3VsZCBtZWFuIHRoZSBKUyBkcml2ZXIgaGFzIGFscmVhZHkgc3RhcnRlZFxuICAgICAgLy8gdXBkYXRpbmcgbm9kZSB2YWx1ZXNcbiAgICAgIHRoaXMuX19tYWtlTmF0aXZlKCk7XG4gICAgfVxuICB9XG5cbiAgX19kZXRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fcGFyZW50Ll9fcmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICB0aGlzLl92YWx1ZS5hbmltYXRlKFxuICAgICAgbmV3IHRoaXMuX2FuaW1hdGlvbkNsYXNzKHtcbiAgICAgICAgLi4udGhpcy5fYW5pbWF0aW9uQ29uZmlnLFxuICAgICAgICB0b1ZhbHVlOiAodGhpcy5fYW5pbWF0aW9uQ29uZmlnLnRvVmFsdWU6IGFueSkuX19nZXRWYWx1ZSgpLFxuICAgICAgfSksXG4gICAgICB0aGlzLl9jYWxsYmFjayxcbiAgICApO1xuICB9XG5cbiAgX19nZXROYXRpdmVDb25maWcoKTogYW55IHtcbiAgICBjb25zdCBhbmltYXRpb24gPSBuZXcgdGhpcy5fYW5pbWF0aW9uQ2xhc3Moe1xuICAgICAgLi4udGhpcy5fYW5pbWF0aW9uQ29uZmlnLFxuICAgICAgLy8gcmVtb3ZlIHRvVmFsdWUgZnJvbSB0aGUgY29uZmlnIGFzIGl0J3MgYSByZWYgdG8gQW5pbWF0ZWQuVmFsdWVcbiAgICAgIHRvVmFsdWU6IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgICBjb25zdCBhbmltYXRpb25Db25maWcgPSBhbmltYXRpb24uX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3RyYWNraW5nJyxcbiAgICAgIGFuaW1hdGlvbklkOiBnZW5lcmF0ZU5ld0FuaW1hdGlvbklkKCksXG4gICAgICBhbmltYXRpb25Db25maWcsXG4gICAgICB0b1ZhbHVlOiB0aGlzLl9wYXJlbnQuX19nZXROYXRpdmVUYWcoKSxcbiAgICAgIHZhbHVlOiB0aGlzLl92YWx1ZS5fX2dldE5hdGl2ZVRhZygpLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRlZFRyYWNraW5nO1xuIl19