6cae4308b6557d8f7bfa5efd1ce65411

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Animation = require('./Animation');

var _require = require('../NativeAnimatedHelper'),
    shouldUseNativeDriver = _require.shouldUseNativeDriver;

var DecayAnimation = function (_Animation) {
  _inherits(DecayAnimation, _Animation);

  function DecayAnimation(config) {
    _classCallCheck(this, DecayAnimation);

    var _this = _possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

    _this._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
    _this._velocity = config.velocity;
    _this._useNativeDriver = shouldUseNativeDriver(config);
    _this.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this.__iterations = config.iterations !== undefined ? config.iterations : 1;
    return _this;
  }

  _createClass(DecayAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'decay',
        deceleration: this._deceleration,
        velocity: this._velocity,
        iterations: this.__iterations
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._lastValue = fromValue;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._startTime = Date.now();
      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();

      var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

      this._onUpdate(value);

      if (Math.abs(this._lastValue - value) < 0.1) {
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._lastValue = value;
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      _get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);

  return DecayAnimation;
}(Animation);

module.exports = DecayAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlY2F5QW5pbWF0aW9uLmpzIl0sIm5hbWVzIjpbIkFuaW1hdGlvbiIsInJlcXVpcmUiLCJzaG91bGRVc2VOYXRpdmVEcml2ZXIiLCJEZWNheUFuaW1hdGlvbiIsImNvbmZpZyIsIl9kZWNlbGVyYXRpb24iLCJkZWNlbGVyYXRpb24iLCJ1bmRlZmluZWQiLCJfdmVsb2NpdHkiLCJ2ZWxvY2l0eSIsIl91c2VOYXRpdmVEcml2ZXIiLCJfX2lzSW50ZXJhY3Rpb24iLCJpc0ludGVyYWN0aW9uIiwiX19pdGVyYXRpb25zIiwiaXRlcmF0aW9ucyIsInR5cGUiLCJmcm9tVmFsdWUiLCJvblVwZGF0ZSIsIm9uRW5kIiwicHJldmlvdXNBbmltYXRpb24iLCJhbmltYXRlZFZhbHVlIiwiX19hY3RpdmUiLCJfbGFzdFZhbHVlIiwiX2Zyb21WYWx1ZSIsIl9vblVwZGF0ZSIsIl9fb25FbmQiLCJfc3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsIl9fc3RhcnROYXRpdmVBbmltYXRpb24iLCJfYW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJiaW5kIiwidmFsdWUiLCJNYXRoIiwiZXhwIiwiYWJzIiwiX19kZWJvdW5jZWRPbkVuZCIsImZpbmlzaGVkIiwiZ2xvYmFsIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0FBVUE7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFlBQVlDLFFBQVEsYUFBUixDQUFsQjs7ZUFFZ0NBLFFBQVEseUJBQVIsQztJQUF6QkMscUIsWUFBQUEscUI7O0lBZURDLGM7OztBQVVKLDBCQUFZQyxNQUFaLEVBQWdEO0FBQUE7O0FBQUE7O0FBRTlDLFVBQUtDLGFBQUwsR0FDRUQsT0FBT0UsWUFBUCxLQUF3QkMsU0FBeEIsR0FBb0NILE9BQU9FLFlBQTNDLEdBQTBELEtBRDVEO0FBRUEsVUFBS0UsU0FBTCxHQUFpQkosT0FBT0ssUUFBeEI7QUFDQSxVQUFLQyxnQkFBTCxHQUF3QlIsc0JBQXNCRSxNQUF0QixDQUF4QjtBQUNBLFVBQUtPLGVBQUwsR0FDRVAsT0FBT1EsYUFBUCxLQUF5QkwsU0FBekIsR0FBcUNILE9BQU9RLGFBQTVDLEdBQTRELElBRDlEO0FBRUEsVUFBS0MsWUFBTCxHQUFvQlQsT0FBT1UsVUFBUCxLQUFzQlAsU0FBdEIsR0FBa0NILE9BQU9VLFVBQXpDLEdBQXNELENBQTFFO0FBUjhDO0FBUy9DOzs7O2lEQUU0QjtBQUMzQixhQUFPO0FBQ0xDLGNBQU0sT0FERDtBQUVMVCxzQkFBYyxLQUFLRCxhQUZkO0FBR0xJLGtCQUFVLEtBQUtELFNBSFY7QUFJTE0sb0JBQVksS0FBS0Q7QUFKWixPQUFQO0FBTUQ7OzswQkFHQ0csUyxFQUNBQyxRLEVBQ0FDLEssRUFDQUMsaUIsRUFDQUMsYSxFQUNNO0FBQ04sV0FBS0MsUUFBTCxHQUFnQixJQUFoQjtBQUNBLFdBQUtDLFVBQUwsR0FBa0JOLFNBQWxCO0FBQ0EsV0FBS08sVUFBTCxHQUFrQlAsU0FBbEI7QUFDQSxXQUFLUSxTQUFMLEdBQWlCUCxRQUFqQjtBQUNBLFdBQUtRLE9BQUwsR0FBZVAsS0FBZjtBQUNBLFdBQUtRLFVBQUwsR0FBa0JDLEtBQUtDLEdBQUwsRUFBbEI7QUFDQSxVQUFJLEtBQUtsQixnQkFBVCxFQUEyQjtBQUN6QixhQUFLbUIsc0JBQUwsQ0FBNEJULGFBQTVCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBS1UsZUFBTCxHQUF1QkMsc0JBQXNCLEtBQUtkLFFBQUwsQ0FBY2UsSUFBZCxDQUFtQixJQUFuQixDQUF0QixDQUF2QjtBQUNEO0FBQ0Y7OzsrQkFFZ0I7QUFDZixVQUFNSixNQUFNRCxLQUFLQyxHQUFMLEVBQVo7O0FBRUEsVUFBTUssUUFDSixLQUFLVixVQUFMLEdBQ0EsS0FBS2YsU0FBTCxJQUNHLElBQUksS0FBS0gsYUFEWixLQUVHLElBQUk2QixLQUFLQyxHQUFMLENBQVMsRUFBRSxJQUFJLEtBQUs5QixhQUFYLEtBQTZCdUIsTUFBTSxLQUFLRixVQUF4QyxDQUFULENBRlAsQ0FGRjs7QUFNQSxXQUFLRixTQUFMLENBQWVTLEtBQWY7O0FBRUEsVUFBSUMsS0FBS0UsR0FBTCxDQUFTLEtBQUtkLFVBQUwsR0FBa0JXLEtBQTNCLElBQW9DLEdBQXhDLEVBQTZDO0FBQzNDLGFBQUtJLGdCQUFMLENBQXNCLEVBQUNDLFVBQVUsSUFBWCxFQUF0QjtBQUNBO0FBQ0Q7O0FBRUQsV0FBS2hCLFVBQUwsR0FBa0JXLEtBQWxCO0FBQ0EsVUFBSSxLQUFLWixRQUFULEVBQW1CO0FBQ2pCLGFBQUtTLGVBQUwsR0FBdUJDLHNCQUFzQixLQUFLZCxRQUFMLENBQWNlLElBQWQsQ0FBbUIsSUFBbkIsQ0FBdEIsQ0FBdkI7QUFDRDtBQUNGOzs7MkJBRVk7QUFDWDtBQUNBLFdBQUtYLFFBQUwsR0FBZ0IsS0FBaEI7QUFDQWtCLGFBQU9DLG9CQUFQLENBQTRCLEtBQUtWLGVBQWpDO0FBQ0EsV0FBS08sZ0JBQUwsQ0FBc0IsRUFBQ0MsVUFBVSxLQUFYLEVBQXRCO0FBQ0Q7Ozs7RUE3RTBCdEMsUzs7QUFnRjdCeUMsT0FBT0MsT0FBUCxHQUFpQnZDLGNBQWpCIiwiZmlsZSI6IkRlY2F5QW5pbWF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGVjYXlBbmltYXRpb25cbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5pbWF0aW9uID0gcmVxdWlyZSgnLi9BbmltYXRpb24nKTtcblxuY29uc3Qge3Nob3VsZFVzZU5hdGl2ZURyaXZlcn0gPSByZXF1aXJlKCcuLi9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuXG5pbXBvcnQgdHlwZSB7QW5pbWF0aW9uQ29uZmlnLCBFbmRDYWxsYmFja30gZnJvbSAnLi9BbmltYXRpb24nO1xuaW1wb3J0IHR5cGUgQW5pbWF0ZWRWYWx1ZSBmcm9tICcuLi9ub2Rlcy9BbmltYXRlZFZhbHVlJztcblxuZXhwb3J0IHR5cGUgRGVjYXlBbmltYXRpb25Db25maWcgPSBBbmltYXRpb25Db25maWcgJiB7XG4gIHZlbG9jaXR5OiBudW1iZXIgfCB7eDogbnVtYmVyLCB5OiBudW1iZXJ9LFxuICBkZWNlbGVyYXRpb24/OiBudW1iZXIsXG59O1xuXG5leHBvcnQgdHlwZSBEZWNheUFuaW1hdGlvbkNvbmZpZ1NpbmdsZSA9IEFuaW1hdGlvbkNvbmZpZyAmIHtcbiAgdmVsb2NpdHk6IG51bWJlcixcbiAgZGVjZWxlcmF0aW9uPzogbnVtYmVyLFxufTtcblxuY2xhc3MgRGVjYXlBbmltYXRpb24gZXh0ZW5kcyBBbmltYXRpb24ge1xuICBfc3RhcnRUaW1lOiBudW1iZXI7XG4gIF9sYXN0VmFsdWU6IG51bWJlcjtcbiAgX2Zyb21WYWx1ZTogbnVtYmVyO1xuICBfZGVjZWxlcmF0aW9uOiBudW1iZXI7XG4gIF92ZWxvY2l0eTogbnVtYmVyO1xuICBfb25VcGRhdGU6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuICBfYW5pbWF0aW9uRnJhbWU6IGFueTtcbiAgX3VzZU5hdGl2ZURyaXZlcjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IERlY2F5QW5pbWF0aW9uQ29uZmlnU2luZ2xlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9kZWNlbGVyYXRpb24gPVxuICAgICAgY29uZmlnLmRlY2VsZXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmRlY2VsZXJhdGlvbiA6IDAuOTk4O1xuICAgIHRoaXMuX3ZlbG9jaXR5ID0gY29uZmlnLnZlbG9jaXR5O1xuICAgIHRoaXMuX3VzZU5hdGl2ZURyaXZlciA9IHNob3VsZFVzZU5hdGl2ZURyaXZlcihjb25maWcpO1xuICAgIHRoaXMuX19pc0ludGVyYWN0aW9uID1cbiAgICAgIGNvbmZpZy5pc0ludGVyYWN0aW9uICE9PSB1bmRlZmluZWQgPyBjb25maWcuaXNJbnRlcmFjdGlvbiA6IHRydWU7XG4gICAgdGhpcy5fX2l0ZXJhdGlvbnMgPSBjb25maWcuaXRlcmF0aW9ucyAhPT0gdW5kZWZpbmVkID8gY29uZmlnLml0ZXJhdGlvbnMgOiAxO1xuICB9XG5cbiAgX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdkZWNheScsXG4gICAgICBkZWNlbGVyYXRpb246IHRoaXMuX2RlY2VsZXJhdGlvbixcbiAgICAgIHZlbG9jaXR5OiB0aGlzLl92ZWxvY2l0eSxcbiAgICAgIGl0ZXJhdGlvbnM6IHRoaXMuX19pdGVyYXRpb25zLFxuICAgIH07XG4gIH1cblxuICBzdGFydChcbiAgICBmcm9tVmFsdWU6IG51bWJlcixcbiAgICBvblVwZGF0ZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQsXG4gICAgb25FbmQ6ID9FbmRDYWxsYmFjayxcbiAgICBwcmV2aW91c0FuaW1hdGlvbjogP0FuaW1hdGlvbixcbiAgICBhbmltYXRlZFZhbHVlOiBBbmltYXRlZFZhbHVlLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9fYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLl9sYXN0VmFsdWUgPSBmcm9tVmFsdWU7XG4gICAgdGhpcy5fZnJvbVZhbHVlID0gZnJvbVZhbHVlO1xuICAgIHRoaXMuX29uVXBkYXRlID0gb25VcGRhdGU7XG4gICAgdGhpcy5fX29uRW5kID0gb25FbmQ7XG4gICAgdGhpcy5fc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBpZiAodGhpcy5fdXNlTmF0aXZlRHJpdmVyKSB7XG4gICAgICB0aGlzLl9fc3RhcnROYXRpdmVBbmltYXRpb24oYW5pbWF0ZWRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub25VcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHZhbHVlID1cbiAgICAgIHRoaXMuX2Zyb21WYWx1ZSArXG4gICAgICB0aGlzLl92ZWxvY2l0eSAvXG4gICAgICAgICgxIC0gdGhpcy5fZGVjZWxlcmF0aW9uKSAqXG4gICAgICAgICgxIC0gTWF0aC5leHAoLSgxIC0gdGhpcy5fZGVjZWxlcmF0aW9uKSAqIChub3cgLSB0aGlzLl9zdGFydFRpbWUpKSk7XG5cbiAgICB0aGlzLl9vblVwZGF0ZSh2YWx1ZSk7XG5cbiAgICBpZiAoTWF0aC5hYnModGhpcy5fbGFzdFZhbHVlIC0gdmFsdWUpIDwgMC4xKSB7XG4gICAgICB0aGlzLl9fZGVib3VuY2VkT25FbmQoe2ZpbmlzaGVkOiB0cnVlfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuX19hY3RpdmUpIHtcbiAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMub25VcGRhdGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICBzdXBlci5zdG9wKCk7XG4gICAgdGhpcy5fX2FjdGl2ZSA9IGZhbHNlO1xuICAgIGdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZSk7XG4gICAgdGhpcy5fX2RlYm91bmNlZE9uRW5kKHtmaW5pc2hlZDogZmFsc2V9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERlY2F5QW5pbWF0aW9uO1xuIl19