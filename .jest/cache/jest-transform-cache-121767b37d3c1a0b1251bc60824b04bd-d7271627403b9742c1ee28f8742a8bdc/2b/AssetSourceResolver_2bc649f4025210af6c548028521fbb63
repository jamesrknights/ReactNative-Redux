ff84fca35a7ff44c7641b3941a19d3cc

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PixelRatio = require('PixelRatio');
var Platform = require('Platform');

var assetPathUtils = require('../../local-cli/bundle/assetPathUtils');
var invariant = require('fbjs/lib/invariant');

function getScaledAssetPath(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = assetPathUtils.getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}

function getAssetPathInDrawableFolder(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);
  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}

var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    _classCallCheck(this, AssetSourceResolver);

    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }

  _createClass(AssetSourceResolver, [{
    key: 'isLoadedFromServer',
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: 'isLoadedFromFileSystem',
    value: function isLoadedFromFileSystem() {
      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: 'defaultAsset',
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }

      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: 'assetServerURL',
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: 'scaledAssetPath',
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: 'scaledAssetURLNearBundle',
    value: function scaledAssetURLNearBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset));
    }
  }, {
    key: 'resourceIdentifierWithoutScale',
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: 'drawableFolderInBundle',
    value: function drawableFolderInBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: 'fromSource',
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }], [{
    key: 'pickScale',
    value: function pickScale(scales, deviceScale) {
      for (var i = 0; i < scales.length; i++) {
        if (scales[i] >= deviceScale) {
          return scales[i];
        }
      }

      return scales[scales.length - 1] || 1;
    }
  }]);

  return AssetSourceResolver;
}();

module.exports = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFzc2V0U291cmNlUmVzb2x2ZXIuanMiXSwibmFtZXMiOlsiUGl4ZWxSYXRpbyIsInJlcXVpcmUiLCJQbGF0Zm9ybSIsImFzc2V0UGF0aFV0aWxzIiwiaW52YXJpYW50IiwiZ2V0U2NhbGVkQXNzZXRQYXRoIiwiYXNzZXQiLCJzY2FsZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJwaWNrU2NhbGUiLCJzY2FsZXMiLCJnZXQiLCJzY2FsZVN1ZmZpeCIsImFzc2V0RGlyIiwiZ2V0QmFzZVBhdGgiLCJuYW1lIiwidHlwZSIsImdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIiLCJkcmF3YmxlRm9sZGVyIiwiZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSIsImZpbGVOYW1lIiwiZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllciIsInNlcnZlclVybCIsImpzYnVuZGxlVXJsIiwic3RhcnRzV2l0aCIsImlzTG9hZGVkRnJvbVNlcnZlciIsImFzc2V0U2VydmVyVVJMIiwiT1MiLCJpc0xvYWRlZEZyb21GaWxlU3lzdGVtIiwiZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSIsInJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSIsInNjYWxlZEFzc2V0VVJMTmVhckJ1bmRsZSIsImZyb21Tb3VyY2UiLCJoYXNoIiwicGF0aCIsInNvdXJjZSIsIl9fcGFja2FnZXJfYXNzZXQiLCJ3aWR0aCIsImhlaWdodCIsInVyaSIsImRldmljZVNjYWxlIiwiaSIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFVQTs7Ozs7O0FBWUEsSUFBTUEsYUFBYUMsUUFBUSxZQUFSLENBQW5CO0FBQ0EsSUFBTUMsV0FBV0QsUUFBUSxVQUFSLENBQWpCOztBQUVBLElBQU1FLGlCQUFpQkYsUUFBUSx1Q0FBUixDQUF2QjtBQUNBLElBQU1HLFlBQVlILFFBQVEsb0JBQVIsQ0FBbEI7O0FBS0EsU0FBU0ksa0JBQVQsQ0FBNEJDLEtBQTVCLEVBQTJDO0FBQ3pD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QUFDTEMsMEJBQWtCLElBRGI7QUFFTEMsZUFBTyxLQUFLL0IsS0FBTCxDQUFXK0IsS0FGYjtBQUdMQyxnQkFBUSxLQUFLaEMsS0FBTCxDQUFXZ0MsTUFIZDtBQUlMQyxhQUFLSixNQUpBO0FBS0w1QixlQUFPQyxvQkFBb0JDLFNBQXBCLENBQThCLEtBQUtILEtBQUwsQ0FBV0ksTUFBekMsRUFBaURWLFdBQVdXLEdBQVgsRUFBakQ7QUFMRixPQUFQO0FBT0Q7Ozs4QkFFZ0JELE0sRUFBdUI4QixXLEVBQTZCO0FBRW5FLFdBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJL0IsT0FBT2dDLE1BQTNCLEVBQW1DRCxHQUFuQyxFQUF3QztBQUN0QyxZQUFJL0IsT0FBTytCLENBQVAsS0FBYUQsV0FBakIsRUFBOEI7QUFDNUIsaUJBQU85QixPQUFPK0IsQ0FBUCxDQUFQO0FBQ0Q7QUFDRjs7QUFLRCxhQUFPL0IsT0FBT0EsT0FBT2dDLE1BQVAsR0FBZ0IsQ0FBdkIsS0FBNkIsQ0FBcEM7QUFDRDs7Ozs7O0FBR0hDLE9BQU9DLE9BQVAsR0FBaUJwQyxtQkFBakIiLCJmaWxlIjoiQXNzZXRTb3VyY2VSZXNvbHZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEFzc2V0U291cmNlUmVzb2x2ZXJcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IHR5cGUgUmVzb2x2ZWRBc3NldFNvdXJjZSA9IHt8XG4gICtfX3BhY2thZ2VyX2Fzc2V0OiBib29sZWFuLFxuICArd2lkdGg6ID9udW1iZXIsXG4gICtoZWlnaHQ6ID9udW1iZXIsXG4gICt1cmk6IHN0cmluZyxcbiAgK3NjYWxlOiBudW1iZXIsXG58fTtcblxuaW1wb3J0IHR5cGUge1BhY2thZ2VyQXNzZXR9IGZyb20gJ0Fzc2V0UmVnaXN0cnknO1xuXG5jb25zdCBQaXhlbFJhdGlvID0gcmVxdWlyZSgnUGl4ZWxSYXRpbycpO1xuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCdQbGF0Zm9ybScpO1xuXG5jb25zdCBhc3NldFBhdGhVdGlscyA9IHJlcXVpcmUoJy4uLy4uL2xvY2FsLWNsaS9idW5kbGUvYXNzZXRQYXRoVXRpbHMnKTtcbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIGxpa2UgJ2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICovXG5mdW5jdGlvbiBnZXRTY2FsZWRBc3NldFBhdGgoYXNzZXQpOiBzdHJpbmcge1xuICB2YXIgc2NhbGUgPSBBc3NldFNvdXJjZVJlc29sdmVyLnBpY2tTY2FsZShhc3NldC5zY2FsZXMsIFBpeGVsUmF0aW8uZ2V0KCkpO1xuICB2YXIgc2NhbGVTdWZmaXggPSBzY2FsZSA9PT0gMSA/ICcnIDogJ0AnICsgc2NhbGUgKyAneCc7XG4gIHZhciBhc3NldERpciA9IGFzc2V0UGF0aFV0aWxzLmdldEJhc2VQYXRoKGFzc2V0KTtcbiAgcmV0dXJuIGFzc2V0RGlyICsgJy8nICsgYXNzZXQubmFtZSArIHNjYWxlU3VmZml4ICsgJy4nICsgYXNzZXQudHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCBsaWtlICdkcmF3YWJsZS1tZHBpL2ljb24ucG5nJ1xuICovXG5mdW5jdGlvbiBnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyKGFzc2V0KTogc3RyaW5nIHtcbiAgdmFyIHNjYWxlID0gQXNzZXRTb3VyY2VSZXNvbHZlci5waWNrU2NhbGUoYXNzZXQuc2NhbGVzLCBQaXhlbFJhdGlvLmdldCgpKTtcbiAgdmFyIGRyYXdibGVGb2xkZXIgPSBhc3NldFBhdGhVdGlscy5nZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lKGFzc2V0LCBzY2FsZSk7XG4gIHZhciBmaWxlTmFtZSA9IGFzc2V0UGF0aFV0aWxzLmdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQpO1xuICByZXR1cm4gZHJhd2JsZUZvbGRlciArICcvJyArIGZpbGVOYW1lICsgJy4nICsgYXNzZXQudHlwZTtcbn1cblxuY2xhc3MgQXNzZXRTb3VyY2VSZXNvbHZlciB7XG4gIHNlcnZlclVybDogP3N0cmluZztcbiAgLy8gd2hlcmUgdGhlIGpzYnVuZGxlIGlzIGJlaW5nIHJ1biBmcm9tXG4gIGpzYnVuZGxlVXJsOiA/c3RyaW5nO1xuICAvLyB0aGUgYXNzZXQgdG8gcmVzb2x2ZVxuICBhc3NldDogUGFja2FnZXJBc3NldDtcblxuICBjb25zdHJ1Y3RvcihzZXJ2ZXJVcmw6ID9zdHJpbmcsIGpzYnVuZGxlVXJsOiA/c3RyaW5nLCBhc3NldDogUGFja2FnZXJBc3NldCkge1xuICAgIHRoaXMuc2VydmVyVXJsID0gc2VydmVyVXJsO1xuICAgIHRoaXMuanNidW5kbGVVcmwgPSBqc2J1bmRsZVVybDtcbiAgICB0aGlzLmFzc2V0ID0gYXNzZXQ7XG4gIH1cblxuICBpc0xvYWRlZEZyb21TZXJ2ZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5zZXJ2ZXJVcmw7XG4gIH1cblxuICBpc0xvYWRlZEZyb21GaWxlU3lzdGVtKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISh0aGlzLmpzYnVuZGxlVXJsICYmIHRoaXMuanNidW5kbGVVcmwuc3RhcnRzV2l0aCgnZmlsZTovLycpKTtcbiAgfVxuXG4gIGRlZmF1bHRBc3NldCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZEZyb21TZXJ2ZXIoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXRTZXJ2ZXJVUkwoKTtcbiAgICB9XG5cbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgcmV0dXJuIHRoaXMuaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSgpXG4gICAgICAgID8gdGhpcy5kcmF3YWJsZUZvbGRlckluQnVuZGxlKClcbiAgICAgICAgOiB0aGlzLnJlc291cmNlSWRlbnRpZmllcldpdGhvdXRTY2FsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhYnNvbHV0ZSBVUkwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZmV0Y2ggdGhlIGFzc2V0XG4gICAqIGZyb20gdGhlIGRldnNlcnZlclxuICAgKi9cbiAgYXNzZXRTZXJ2ZXJVUkwoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaW52YXJpYW50KCEhdGhpcy5zZXJ2ZXJVcmwsICduZWVkIHNlcnZlciB0byBsb2FkIGZyb20nKTtcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKFxuICAgICAgdGhpcy5zZXJ2ZXJVcmwgK1xuICAgICAgICBnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkgK1xuICAgICAgICAnP3BsYXRmb3JtPScgK1xuICAgICAgICBQbGF0Zm9ybS5PUyArXG4gICAgICAgICcmaGFzaD0nICtcbiAgICAgICAgdGhpcy5hc3NldC5oYXNoLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdG8ganVzdCB0aGUgc2NhbGVkIGFzc2V0IGZpbGVuYW1lXG4gICAqIEUuZy4gJ2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICAgKi9cbiAgc2NhbGVkQXNzZXRQYXRoKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyB0byB3aGVyZSB0aGUgYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSwgd2l0aCBhIHNjYWxlZCBhc3NldCBmaWxlbmFtZVxuICAgKiBFLmcuICdmaWxlOi8vL3NkY2FyZC9idW5kbGUvYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gICAqL1xuICBzY2FsZWRBc3NldFVSTE5lYXJCdW5kbGUoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuanNidW5kbGVVcmwgfHwgJ2ZpbGU6Ly8nO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UocGF0aCArIGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbG9jYXRpb24gb2YgYXNzZXRzIGJ1bmRsZWQgd2l0aCB0aGUgYXBwLCBsb2NhdGVkIGJ5XG4gICAqIHJlc291cmNlIGlkZW50aWZpZXJcbiAgICogVGhlIEFuZHJvaWQgcmVzb3VyY2Ugc3lzdGVtIHBpY2tzIHRoZSBjb3JyZWN0IHNjYWxlLlxuICAgKiBFLmcuICdhc3NldHNfYXdlc29tZW1vZHVsZV9pY29uJ1xuICAgKi9cbiAgcmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGludmFyaWFudChcbiAgICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcsXG4gICAgICAncmVzb3VyY2UgaWRlbnRpZmllcnMgd29yayBvbiBBbmRyb2lkJyxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZyb21Tb3VyY2UoXG4gICAgICBhc3NldFBhdGhVdGlscy5nZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKHRoaXMuYXNzZXQpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdGhlIGpzYnVuZGxlIGlzIHJ1bm5pbmcgZnJvbSBhIHNpZGVsb2FkIGxvY2F0aW9uLCB0aGlzIHJlc29sdmVzIGFzc2V0c1xuICAgKiByZWxhdGl2ZSB0byBpdHMgbG9jYXRpb25cbiAgICogRS5nLiAnZmlsZTovLy9zZGNhcmQvQXdlc29tZU1vZHVsZS9kcmF3YWJsZS1tZHBpL2ljb24ucG5nJ1xuICAgKi9cbiAgZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5qc2J1bmRsZVVybCB8fCAnZmlsZTovLyc7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShwYXRoICsgZ2V0QXNzZXRQYXRoSW5EcmF3YWJsZUZvbGRlcih0aGlzLmFzc2V0KSk7XG4gIH1cblxuICBmcm9tU291cmNlKHNvdXJjZTogc3RyaW5nKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fcGFja2FnZXJfYXNzZXQ6IHRydWUsXG4gICAgICB3aWR0aDogdGhpcy5hc3NldC53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5hc3NldC5oZWlnaHQsXG4gICAgICB1cmk6IHNvdXJjZSxcbiAgICAgIHNjYWxlOiBBc3NldFNvdXJjZVJlc29sdmVyLnBpY2tTY2FsZSh0aGlzLmFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwaWNrU2NhbGUoc2NhbGVzOiBBcnJheTxudW1iZXI+LCBkZXZpY2VTY2FsZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBQYWNrYWdlciBndWFyYW50ZWVzIHRoYXQgYHNjYWxlc2AgYXJyYXkgaXMgc29ydGVkXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2FsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzY2FsZXNbaV0gPj0gZGV2aWNlU2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIHNjYWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3RoaW5nIG1hdGNoZXMsIGRldmljZSBzY2FsZSBpcyBsYXJnZXIgdGhhbiBhbnkgYXZhaWxhYmxlXG4gICAgLy8gc2NhbGVzLCBzbyB3ZSByZXR1cm4gdGhlIGJpZ2dlc3Qgb25lLiBVbmxlc3MgdGhlIGFycmF5IGlzIGVtcHR5LFxuICAgIC8vIGluIHdoaWNoIGNhc2Ugd2UgZGVmYXVsdCB0byAxXG4gICAgcmV0dXJuIHNjYWxlc1tzY2FsZXMubGVuZ3RoIC0gMV0gfHwgMTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2V0U291cmNlUmVzb2x2ZXI7XG4iXX0=