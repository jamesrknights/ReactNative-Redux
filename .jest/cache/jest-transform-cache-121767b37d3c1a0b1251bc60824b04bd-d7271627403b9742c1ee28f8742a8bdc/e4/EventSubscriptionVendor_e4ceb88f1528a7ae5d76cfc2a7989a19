4b18e1a50733bea2bcfe3fbf4d64cafa

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var invariant = require('fbjs/lib/invariant');

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    _classCallCheck(this, EventSubscriptionVendor);

    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }

  _createClass(EventSubscriptionVendor, [{
    key: 'addSubscription',
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');
      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }
      var key = this._subscriptionsForType[eventType].length;
      this._subscriptionsForType[eventType].push(subscription);
      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: 'removeAllSubscriptions',
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;

      var subscriptionsForType = this._subscriptionsForType[eventType];
      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: 'getSubscriptionsForType',
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);

  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJFdmVudFN1YnNjcmlwdGlvblZlbmRvciIsIl9zdWJzY3JpcHRpb25zRm9yVHlwZSIsIl9jdXJyZW50U3Vic2NyaXB0aW9uIiwiZXZlbnRUeXBlIiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsImtleSIsImxlbmd0aCIsInB1c2giLCJ1bmRlZmluZWQiLCJzdWJzY3JpcHRpb25zRm9yVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFTQTs7Ozs7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxvQkFBUixDQUFsQjs7SUFRTUMsdUI7QUFLSixxQ0FBYztBQUFBOztBQUNaLFNBQUtDLHFCQUFMLEdBQTZCLEVBQTdCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsSUFBNUI7QUFDRDs7OztvQ0FTQ0MsUyxFQUFtQkMsWSxFQUFvRDtBQUN2RU4sZ0JBQ0VNLGFBQWFDLFVBQWIsS0FBNEIsSUFEOUIsRUFFRSx3REFGRjtBQUdBLFVBQUksQ0FBQyxLQUFLSixxQkFBTCxDQUEyQkUsU0FBM0IsQ0FBTCxFQUE0QztBQUMxQyxhQUFLRixxQkFBTCxDQUEyQkUsU0FBM0IsSUFBd0MsRUFBeEM7QUFDRDtBQUNELFVBQU1HLE1BQU0sS0FBS0wscUJBQUwsQ0FBMkJFLFNBQTNCLEVBQXNDSSxNQUFsRDtBQUNBLFdBQUtOLHFCQUFMLENBQTJCRSxTQUEzQixFQUFzQ0ssSUFBdEMsQ0FBMkNKLFlBQTNDO0FBQ0FBLG1CQUFhRCxTQUFiLEdBQXlCQSxTQUF6QjtBQUNBQyxtQkFBYUUsR0FBYixHQUFtQkEsR0FBbkI7QUFDQSxhQUFPRixZQUFQO0FBQ0Q7OzsyQ0FRc0JELFMsRUFBb0I7QUFDekMsVUFBSUEsY0FBY00sU0FBbEIsRUFBNkI7QUFDM0IsYUFBS1IscUJBQUwsR0FBNkIsRUFBN0I7QUFDRCxPQUZELE1BRU87QUFDTCxlQUFPLEtBQUtBLHFCQUFMLENBQTJCRSxTQUEzQixDQUFQO0FBQ0Q7QUFDRjs7O3VDQVFrQkMsWSxFQUFzQjtBQUN2QyxVQUFNRCxZQUFZQyxhQUFhRCxTQUEvQjtBQUNBLFVBQU1HLE1BQU1GLGFBQWFFLEdBQXpCOztBQUVBLFVBQU1JLHVCQUF1QixLQUFLVCxxQkFBTCxDQUEyQkUsU0FBM0IsQ0FBN0I7QUFDQSxVQUFJTyxvQkFBSixFQUEwQjtBQUN4QixlQUFPQSxxQkFBcUJKLEdBQXJCLENBQVA7QUFDRDtBQUNGOzs7NENBY3VCSCxTLEVBQXlDO0FBQ2hFLGFBQU8sS0FBS0YscUJBQUwsQ0FBMkJFLFNBQTNCLENBQVA7QUFDQTs7Ozs7O0FBR0hRLE9BQU9DLE9BQVAsR0FBaUJaLHVCQUFqQiIsImZpbGUiOiJFdmVudFN1YnNjcmlwdGlvblZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yXG4gKiBAZmxvd1xuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG5pbXBvcnQgdHlwZSBFdmVudFN1YnNjcmlwdGlvbiBmcm9tICdFdmVudFN1YnNjcmlwdGlvbic7XG5cbi8qKlxuICogRXZlbnRTdWJzY3JpcHRpb25WZW5kb3Igc3RvcmVzIGEgc2V0IG9mIEV2ZW50U3Vic2NyaXB0aW9ucyB0aGF0IGFyZVxuICogc3Vic2NyaWJlZCB0byBhIHBhcnRpY3VsYXIgZXZlbnQgdHlwZS5cbiAqL1xuY2xhc3MgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3Ige1xuXG4gIF9zdWJzY3JpcHRpb25zRm9yVHlwZTogT2JqZWN0O1xuICBfY3VycmVudFN1YnNjcmlwdGlvbjogP0V2ZW50U3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlID0ge307XG4gICAgdGhpcy5fY3VycmVudFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHN1YnNjcmlwdGlvbiBrZXllZCBieSBhbiBldmVudCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7RXZlbnRTdWJzY3JpcHRpb259IHN1YnNjcmlwdGlvblxuICAgKi9cbiAgYWRkU3Vic2NyaXB0aW9uKFxuICAgIGV2ZW50VHlwZTogc3RyaW5nLCBzdWJzY3JpcHRpb246IEV2ZW50U3Vic2NyaXB0aW9uKTogRXZlbnRTdWJzY3JpcHRpb24ge1xuICAgIGludmFyaWFudChcbiAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpYmVyID09PSB0aGlzLFxuICAgICAgJ1RoZSBzdWJzY3JpYmVyIG9mIHRoZSBzdWJzY3JpcHRpb24gaXMgaW5jb3JyZWN0bHkgc2V0LicpO1xuICAgIGlmICghdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXSkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXSA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBrZXkgPSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdLmxlbmd0aDtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICBzdWJzY3JpcHRpb24uZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuICAgIHN1YnNjcmlwdGlvbi5rZXkgPSBrZXk7XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgYnVsayBzZXQgb2YgdGhlIHN1YnNjcmlwdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gZXZlbnRUeXBlIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgZXZlbnQgdHlwZSB3aG9zZVxuICAgKiAgIHJlZ2lzdGVyZWQgc3Vwc2NyaXB0aW9ucyB0byByZW1vdmUsIGlmIG51bGwgcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zLlxuICAgKi9cbiAgcmVtb3ZlQWxsU3Vic2NyaXB0aW9ucyhldmVudFR5cGU6ID9zdHJpbmcpIHtcbiAgICBpZiAoZXZlbnRUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc3BlY2lmaWMgc3Vic2NyaXB0aW9uLiBJbnN0ZWFkIG9mIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgY2FsbFxuICAgKiBgc3Vic2NyaXB0aW9uLnJlbW92ZSgpYCBkaXJlY3RseS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHN1YnNjcmlwdGlvblxuICAgKi9cbiAgcmVtb3ZlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbjogT2JqZWN0KSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gc3Vic2NyaXB0aW9uLmV2ZW50VHlwZTtcbiAgICBjb25zdCBrZXkgPSBzdWJzY3JpcHRpb24ua2V5O1xuXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uc0ZvclR5cGUgPSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICAgIGlmIChzdWJzY3JpcHRpb25zRm9yVHlwZSkge1xuICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNGb3JUeXBlW2tleV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFycmF5IG9mIHN1YnNjcmlwdGlvbnMgdGhhdCBhcmUgY3VycmVudGx5IHJlZ2lzdGVyZWQgZm9yIHRoZVxuICAgKiBnaXZlbiBldmVudCB0eXBlLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGFycmF5IGNhbiBiZSBwb3RlbnRpYWxseSBzcGFyc2UgYXMgc3Vic2NyaXB0aW9ucyBhcmUgZGVsZXRlZFxuICAgKiBmcm9tIGl0IHdoZW4gdGhleSBhcmUgcmVtb3ZlZC5cbiAgICpcbiAgICogVE9ETzogVGhpcyByZXR1cm5zIGEgbnVsbGFibGUgYXJyYXkuIHdhdD9cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcmV0dXJucyB7P2FycmF5fVxuICAgKi9cbiAgZ2V0U3Vic2NyaXB0aW9uc0ZvclR5cGUoZXZlbnRUeXBlOiBzdHJpbmcpOiA/W0V2ZW50U3Vic2NyaXB0aW9uXSB7XG4gICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yO1xuIl19