2c9dfbf07af08075ee8622887cc136cd

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require('ColorPropType');
var ImageResizeMode = require('ImageResizeMode');
var LayoutPropTypes = require('LayoutPropTypes');
var ReactPropTypes = require('prop-types');
var ShadowPropTypesIOS = require('ShadowPropTypesIOS');
var TransformPropTypes = require('TransformPropTypes');

var ImageStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderWidth: ReactPropTypes.number,
  borderRadius: ReactPropTypes.number,
  overflow: ReactPropTypes.oneOf(['visible', 'hidden']),

  tintColor: ColorPropType,
  opacity: ReactPropTypes.number,

  overlayColor: ReactPropTypes.string,

  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number
});

module.exports = ImageStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlU3R5bGVQcm9wVHlwZXMuanMiXSwibmFtZXMiOlsiQ29sb3JQcm9wVHlwZSIsInJlcXVpcmUiLCJJbWFnZVJlc2l6ZU1vZGUiLCJMYXlvdXRQcm9wVHlwZXMiLCJSZWFjdFByb3BUeXBlcyIsIlNoYWRvd1Byb3BUeXBlc0lPUyIsIlRyYW5zZm9ybVByb3BUeXBlcyIsIkltYWdlU3R5bGVQcm9wVHlwZXMiLCJyZXNpemVNb2RlIiwib25lT2YiLCJPYmplY3QiLCJrZXlzIiwiYmFja2ZhY2VWaXNpYmlsaXR5IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsIm51bWJlciIsImJvcmRlclJhZGl1cyIsIm92ZXJmbG93IiwidGludENvbG9yIiwib3BhY2l0eSIsIm92ZXJsYXlDb2xvciIsInN0cmluZyIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFVQTs7OztBQUVBLElBQUlBLGdCQUFnQkMsUUFBUSxlQUFSLENBQXBCO0FBQ0EsSUFBSUMsa0JBQWtCRCxRQUFRLGlCQUFSLENBQXRCO0FBQ0EsSUFBSUUsa0JBQWtCRixRQUFRLGlCQUFSLENBQXRCO0FBQ0EsSUFBSUcsaUJBQWlCSCxRQUFRLFlBQVIsQ0FBckI7QUFDQSxJQUFJSSxxQkFBcUJKLFFBQVEsb0JBQVIsQ0FBekI7QUFDQSxJQUFJSyxxQkFBcUJMLFFBQVEsb0JBQVIsQ0FBekI7O0FBRUEsSUFBSU0sbUNBQ0NKLGVBREQsRUFFQ0Usa0JBRkQsRUFHQ0Msa0JBSEQ7QUFJRkUsY0FBWUosZUFBZUssS0FBZixDQUFxQkMsT0FBT0MsSUFBUCxDQUFZVCxlQUFaLENBQXJCLENBSlY7QUFLRlUsc0JBQW9CUixlQUFlSyxLQUFmLENBQXFCLENBQUMsU0FBRCxFQUFZLFFBQVosQ0FBckIsQ0FMbEI7QUFNRkksbUJBQWlCYixhQU5mO0FBT0ZjLGVBQWFkLGFBUFg7QUFRRmUsZUFBYVgsZUFBZVksTUFSMUI7QUFTRkMsZ0JBQWNiLGVBQWVZLE1BVDNCO0FBVUZFLFlBQVVkLGVBQWVLLEtBQWYsQ0FBcUIsQ0FBQyxTQUFELEVBQVksUUFBWixDQUFyQixDQVZSOztBQWVGVSxhQUFXbkIsYUFmVDtBQWdCRm9CLFdBQVNoQixlQUFlWSxNQWhCdEI7O0FBa0NGSyxnQkFBY2pCLGVBQWVrQixNQWxDM0I7O0FBcUNGQyx1QkFBcUJuQixlQUFlWSxNQXJDbEM7QUFzQ0ZRLHdCQUFzQnBCLGVBQWVZLE1BdENuQztBQXVDRlMsMEJBQXdCckIsZUFBZVksTUF2Q3JDO0FBd0NGVSwyQkFBeUJ0QixlQUFlWTtBQXhDdEMsRUFBSjs7QUEyQ0FXLE9BQU9DLE9BQVAsR0FBaUJyQixtQkFBakIiLCJmaWxlIjoiSW1hZ2VTdHlsZVByb3BUeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIEltYWdlU3R5bGVQcm9wVHlwZXNcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIENvbG9yUHJvcFR5cGUgPSByZXF1aXJlKCdDb2xvclByb3BUeXBlJyk7XG52YXIgSW1hZ2VSZXNpemVNb2RlID0gcmVxdWlyZSgnSW1hZ2VSZXNpemVNb2RlJyk7XG52YXIgTGF5b3V0UHJvcFR5cGVzID0gcmVxdWlyZSgnTGF5b3V0UHJvcFR5cGVzJyk7XG52YXIgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG52YXIgU2hhZG93UHJvcFR5cGVzSU9TID0gcmVxdWlyZSgnU2hhZG93UHJvcFR5cGVzSU9TJyk7XG52YXIgVHJhbnNmb3JtUHJvcFR5cGVzID0gcmVxdWlyZSgnVHJhbnNmb3JtUHJvcFR5cGVzJyk7XG5cbnZhciBJbWFnZVN0eWxlUHJvcFR5cGVzID0ge1xuICAuLi5MYXlvdXRQcm9wVHlwZXMsXG4gIC4uLlNoYWRvd1Byb3BUeXBlc0lPUyxcbiAgLi4uVHJhbnNmb3JtUHJvcFR5cGVzLFxuICByZXNpemVNb2RlOiBSZWFjdFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhJbWFnZVJlc2l6ZU1vZGUpKSxcbiAgYmFja2ZhY2VWaXNpYmlsaXR5OiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ3Zpc2libGUnLCAnaGlkZGVuJ10pLFxuICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIGJvcmRlckNvbG9yOiBDb2xvclByb3BUeXBlLFxuICBib3JkZXJXaWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBib3JkZXJSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgb3ZlcmZsb3c6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFsndmlzaWJsZScsICdoaWRkZW4nXSksXG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIGNvbG9yIG9mIGFsbCB0aGUgbm9uLXRyYW5zcGFyZW50IHBpeGVscyB0byB0aGUgdGludENvbG9yLlxuICAgKi9cbiAgdGludENvbG9yOiBDb2xvclByb3BUeXBlLFxuICBvcGFjaXR5OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBpbWFnZSBoYXMgcm91bmRlZCBjb3JuZXJzLCBzcGVjaWZ5aW5nIGFuIG92ZXJsYXlDb2xvciB3aWxsXG4gICAqIGNhdXNlIHRoZSByZW1haW5pbmcgc3BhY2UgaW4gdGhlIGNvcm5lcnMgdG8gYmUgZmlsbGVkIHdpdGggYSBzb2xpZCBjb2xvci5cbiAgICogVGhpcyBpcyB1c2VmdWwgaW4gY2FzZXMgd2hpY2ggYXJlIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIEFuZHJvaWRcbiAgICogaW1wbGVtZW50YXRpb24gb2Ygcm91bmRlZCBjb3JuZXJzOlxuICAgKiAgIC0gQ2VydGFpbiByZXNpemUgbW9kZXMsIHN1Y2ggYXMgJ2NvbnRhaW4nXG4gICAqICAgLSBBbmltYXRlZCBHSUZzXG4gICAqXG4gICAqIEEgdHlwaWNhbCB3YXkgdG8gdXNlIHRoaXMgcHJvcCBpcyB3aXRoIGltYWdlcyBkaXNwbGF5ZWQgb24gYSBzb2xpZFxuICAgKiBiYWNrZ3JvdW5kIGFuZCBzZXR0aW5nIHRoZSBgb3ZlcmxheUNvbG9yYCB0byB0aGUgc2FtZSBjb2xvclxuICAgKiBhcyB0aGUgYmFja2dyb3VuZC5cbiAgICpcbiAgICogRm9yIGRldGFpbHMgb2YgaG93IHRoaXMgd29ya3MgdW5kZXIgdGhlIGhvb2QsIHNlZVxuICAgKiBodHRwOi8vZnJlc2NvbGliLm9yZy9kb2NzL3JvdW5kZWQtY29ybmVycy1hbmQtY2lyY2xlcy5odG1sXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBvdmVybGF5Q29sb3I6IFJlYWN0UHJvcFR5cGVzLnN0cmluZyxcblxuICAvLyBBbmRyb2lkLVNwZWNpZmljIHN0eWxlc1xuICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW1hZ2VTdHlsZVByb3BUeXBlcztcbiJdfQ==